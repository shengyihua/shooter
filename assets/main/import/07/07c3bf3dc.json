[1,["e8/Dn/SBRJ7IW9yFQLpiKv","80h6sZlilJM72/TOyj06YE@2bc6c","12Y9dMgWdJKJGmTiZyQR9H@a804a","06m3/++DFPuYWsXkw+qX0x@6c48a","f40/uir75Cs5vVfdOHqzAJ","80h6sZlilJM72/TOyj06YE@853c6","80h6sZlilJM72/TOyj06YE@438fe","80h6sZlilJM72/TOyj06YE@c2696","80h6sZlilJM72/TOyj06YE@ca7e4","d3x4IMKphEKYvHuEU7yaxB","a7YStUNeNCOKGpSntUY1g5","92RRsaW2RM8ZbOXdk6SRLL","1brw/JvvpFnIvdrxpFCgMZ","84PRLQx+VOIay37OHtCgKD","47HZHUFHlETb4vty5O28GA@6733f","b5snqx50BDmLQHhI/CssiX@6c48a","d1NGQ2rJZCcbhjH0/erZWw","b1MqomQV1LWYlH9OvbKnYT","0dpw9Ljh9MVIv2NWhpxGzW@c2696","6aWtgjj/RFP6iKG+GeAgDe@f9941","5a/gdroK5D8aaZAPR5H3y5@f9941","5a/gdroK5D8aaZAPR5H3y5@6c48a","6aWtgjj/RFP6iKG+GeAgDe@6c48a","b6Z9oZ9nZNKosssVxpP576@6c48a","b7UEp0+hdLFrkS2W4dUhVT@6c48a","c0fUhoS+tDNo6PO7iADrQt@6c48a","71e2sgoHdB5YRUDix8z3iP@6c48a","77FXLyhp1GzrXu/RJE3Vrs","12Y9dMgWdJKJGmTiZyQR9H@fc873","543ZCEeQxJAapa521cZAC9@6c48a","1d3vv50YRFLYQSwiknFqAn@6c48a","66ewAXEGhC/o9g+SGfPw/I@6c48a","e9m2iJ2cRD64MRzUKT3OAZ","0dpw9Ljh9MVIv2NWhpxGzW@e5760","0dpw9Ljh9MVIv2NWhpxGzW@30732","eadHiwQI1AUrcD8NI1Xglf","d1dGZQvFtEG4PaYm73zMmn","0dpw9Ljh9MVIv2NWhpxGzW@a6e6a","0dpw9Ljh9MVIv2NWhpxGzW@f1394","0dpw9Ljh9MVIv2NWhpxGzW@2bc6c","0dpw9Ljh9MVIv2NWhpxGzW@ca7e4","978ctkwAtFt59n46hBUKaJ@6afdb","32Mn0XgMFOY5YytUX7Bxkr","beP8/Tc3VLsbpLDD4+cdDo@4cce4","b0cfCXi09HA4HscP04PtSH"],["_parent","node","_mesh","root","_effectAsset","_skeleton","mainTexture","_particleSystem","_mainTexture","_defaultClip","_spriteFrame","_textureSource","joyBk","midNode","data","sportLight","bluteLine","gunPartic","gunPoint","scene","debugnode"],[["cc.Node",["_name","_id","_layer","_active","_parent","_components","_prefab","_lpos","_children","_euler","_lrot","_lscale"],-1,1,9,4,5,2,5,5,5],["cc.Material",["_defines","_states","_techIdx","_props"],0,12],["cc.MeshRenderer",["_name","_shadowReceivingMode","_enabled","node","__prefab","_materials","lightmapSettings","_mesh"],0,1,4,3,4,6],["cc.RigidBody",["_group","_linearDamping","_angularDamping","_useGravity","_type","node","__prefab","_linearFactor","_angularFactor"],-2,1,4,5,5],["cc.Node",["_name","_parent","_prefab","_lpos","_lrot","_euler","_components","_children"],2,1,4,5,5,5,2,12],["cc.BoxCollider",["node","__prefab","_center","_size"],3,1,4,5,5],["cc.Keyframe",["time","value","inTangent","outTangent"],-1],["cc.Widget",["_alignFlags","_left","_bottom","_isAbsLeft","_isAbsBottom","_right","_isAbsRight","node"],-4,1],["cc.GradientRange",["_mode","color","gradient"],2,5,4],["cc.CurveRange",["constant","mode","curve"],1,4],"cc.SpriteFrame",["cc.AnimationClip",["_name","_native","sample","_duration","_hash","wrapMode","_keys","_curves"],-3,9,12],["cc.CompactValueTypeArray",["_unitCount","_unitElement","_length","_byteOffset"],-1],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_euler"],2,1,9,4,5,5,5],["cc.PrefabInfo",["fileId","_synced","root","asset"],1,1,1],["cc.SkeletalAnimation",["playOnLoad","_useBakedAnimation","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.ParticleSystem",["duration","loop","playOnAwake","_capacity","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","node","bursts"],-1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,9],["cc.ColorKey",["time","color"],2,5],["cc.AlphaKey",["alpha","time"],1],["cc.ShapeModule",["_enable","emitFrom","radius","_angle","randomDirectionAmount","length","arcSpeed"],-3,4],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],["cc.RotationOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.animation.HierarchyPath",["path"],2],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Mesh",["_native","_dataLength","_hash","_struct"],0,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",[],3],["cc.CompPrefabInfo ",["fileId"],2],["cc.ModelLightmapSettings",[],3],["cc.SceneAsset",[],3],["5e739ILwstIoIHwHRjrdQWO",["node","__prefab","gunPoint","gunPartic","bluteLine","sportLight"],3,1,4,1,1,1,1],["eb40cRSW3JLjaomK4OZPu2a",["node","__prefab"],3,1,4],["fa7aft0ii9Al7bRZNCOWiLg",["stopDistance","node","__prefab"],2,1,4],["cc.Scene",["_children","_globals"],3,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.AnimationCurve",["preWrapMode","postWrapMode","keyFrames"],1,9],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Sprite",["node","_spriteFrame"],3,1,6],["275fb7kvTJDT6QRpOP13/Md",["node","midNode","joyBk","joyCallBack"],3,1,1,1,9],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.Canvas",["node"],3,1],["cc.Camera",["_projection","_orthoHeight","_visibility","node"],0,1],["ff8ee6OQldPNLrgLpXROotm",["isFollowRotation","node","followTarget","offset"],2,1,1,5],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.SpotLight",["_size","_luminance","_range","_spotAngle","node","__prefab","_color","_staticSettings"],-1,1,4,5,4],["cc.StaticLightSettings",[],3],["cc.CurveRange",["mode","curve"],2,1],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_mainTexture"],3,6],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["b6e4d4cXKVMhYK+qgVbuo1w",["_name","nodeDiameter","layermask","node","gridWorldSize","debugnode"],0,1,8,6],["cc.Burst",["repeatInterval","count"],2,4]],[[12,3,0,1,2,5],[14,0,1,2,3],[22,0,2],[9,1],[0,0,4,8,6,7,10,9,2],[27,0,2],[9,0,2],[13,0,1,2,3,4,5,6,2],[0,0,4,6,7,2],[0,0,4,6,7,10,9,2],[28,1],[8,1],[0,0,8,6,7,10,9,2],[13,0,1,2,3,4,2],[0,0,4,5,6,11,2],[5,0,1,2,3,1],[17,0,1,2],[47,0,1,2,3,4,5,6,1],[18,0,1,3],[0,0,1,8,5,6,7,3],[0,0,4,8,6,11,2],[0,0,4,8,6,10,9,2],[8,0,2,2],[51,0,1,2],[52,0,1,1],[53,0,1,2,3,4,2],[54,0,1,2,1],[55,0,1,2,3,1],[56,0,1,1],[57,0,1,2,3,4,1],[58,0,1],[24,0,1,2,3,4],[1,1,0,3,3],[0,0,4,8,5,6,10,9,2],[4,0,1,7,2,3,4,5,2],[4,0,1,6,2,3,2],[15,0,2,3,4,5,2],[3,0,1,2,3,5,6,7,8,5],[3,0,4,5,6,3],[31,0,1,1],[32,0,1,2,2],[16,0,1,2,3,29,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,30,19,20,21,22,23,24,25,26,27,28,5],[50,0,1,2],[17,1,1],[18,0,2],[19,0,1,2,3,6,5],[20,1,2,3,4,1],[21,0,1,2,3,2],[61,0,1,2],[2,0,3,4,5,6,7,2],[12,0,1,2,4],[2,3,4,5,6,7,1],[11,0,1,2,5,3,4,6,7,7],[5,0,1],[3,0,4,5,3],[40,0,1,1],[0,0,2,4,5,6,7,11,3],[2,0,2,3,4,5,6,7,3],[5,0,1,1],[41,0,1,1],[23,0,1,2,3,4],[25,0,1,2,4],[0,0,4,8,5,6,7,10,9,2],[0,0,4,8,6,2],[6,0,1,3],[0,0,8,5,7,2],[0,0,2,4,5,7,11,3],[0,0,2,4,5,7,10,11,9,3],[0,0,4,5,2],[0,0,4,5,6,7,11,2],[39,0,1,2,3],[42,0,1,2,3,1],[43,0,1,2,3],[49,1],[11,0,1,2,3,4,6,7,6],[1,2,1,0,3,4],[1,0,2],[1,0,3,2],[26,1],[0,0,5,6,7,10,9,2],[0,0,1,4,8,3],[0,0,4,8,5,6,7,2],[0,0,1,4,8,5,7,3],[0,0,3,2,1,4,5,7,11,5],[0,0,1,4,5,7,10,9,3],[0,0,4,8,5,6,11,2],[0,0,3,4,5,6,7,10,9,3],[0,0,3,4,5,6,7,11,3],[0,0,3,4,5,6,7,11,9,3],[0,0,1,4,5,10,9,3],[0,0,1,4,5,3],[4,0,1,6,2,4,5,2],[2,0,1,3,4,5,6,7,3],[14,0,1,2,3,3],[29,1],[15,0,1,2,3,4,5,3],[3,1,2,3,5,6,7,8,4],[30,0,1,2,3,4,5,1],[33,0,1,1],[34,0,1,2,3,1],[35,1],[36,0,1],[37,1],[38,1],[6,0,2],[6,0,1,2,3,5],[7,0,1,2,3,4,7,6],[7,0,1,5,2,3,6,4,7,8],[7,0,7,2],[44,0,1],[45,0,1,2,3,4],[46,0,1,2,3,2],[48,0,1,2,3,4,5,6,7,5],[16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5],[8,1,1],[9,1,2,2],[19,0,1,4,2,5,3,6,7],[20,0,1,2,3,4,2],[21,1,2,3,1],[59,0,1,1],[60,0,1,2,3,4,5,4]],[[[[52,"Move",".bin",30,2,0.8,3677012307,[[0,13504,22,6,22],[0,13592,22,6,22],[0,13680,22,6,22],[0,13768,22,6,22],[0,13856,22,6,22],[0,13944,22,6,22],[0,14032,22,6,22],[0,14120,22,6,22],[0,14208,3,6,3],[0,14220,3,6,3],[0,14232,3,6,3],[0,14244,3,6,3],[0,14256,3,6,3],[0,14268,3,6,3],[0,14280,22,6,22],[0,14368,3,6,3],[0,14380,22,6,22],[0,14468,3,6,3],[0,14480,3,6,3],[0,14492,3,6,3],[0,14504,3,6,3],[0,14516,3,6,3],[0,14528,22,6,22],[0,14616,3,6,3],[0,14628,3,6,3],[0,14640,22,6,22],[0,14728,22,6,22],[0,14816,22,6,22],[0,14904,22,6,22],[0,14992,3,6,3],[0,15004,3,6,3],[0,15016,3,6,3],[0,15028,3,6,3],[0,15040,3,6,3],[0,15052,22,6,22],[0,15140,22,6,22],[0,15228,3,6,3],[0,15240,22,6,22],[0,15328,22,6,22],[0,15416,22,6,22],[0,15504,22,6,22],[0,15592,22,6,22],[0,15680,3,6,3],[0,15692,22,6,22],[0,15780,3,6,3]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[50,66,22,22]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,264,88,38,22]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,616,3,22,1]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,628,66,22,22]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,892,88,38,22]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,1244,3,22,1]]],[{},"modifiers",12,[[-7,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,1256,88,38,22]]],[{},"modifiers",12,[[-8,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,1608,3,22,1]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,1620,3,22,1]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,1632,66,22,22]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,1896,88,38,22]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,2248,3,22,1]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,2260,66,22,22]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,2524,88,38,22]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,2876,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,2888,88,38,22]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3240,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3252,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,3264,88,38,22]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3616,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3628,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,3640,88,38,22]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3992,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4004,3,22,1]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,4016,9,22,3]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,4052,12,38,3]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4100,3,22,1]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,4112,9,22,3]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,4148,12,38,3]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4196,3,22,1]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,4208,9,22,3]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,4244,12,38,3]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4292,3,22,1]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,4304,9,22,3]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,4340,12,38,3]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4388,3,22,1]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,4400,9,22,3]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,4436,12,38,3]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4484,3,22,1]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,4496,9,22,3]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,4532,12,38,3]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4580,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,4592,88,38,22]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4944,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4956,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,4968,12,38,3]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5016,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5028,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,5040,88,38,22]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5392,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5404,3,22,1]]],[{},"modifiers",12,[[-52,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,5416,12,38,3]]],[{},"modifiers",12,[[-53,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5464,3,22,1]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5476,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,5488,12,38,3]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5536,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5548,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,5560,12,38,3]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5608,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5620,3,22,1]]],[{},"modifiers",12,[[-61,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,5632,12,38,3]]],[{},"modifiers",12,[[-62,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5680,3,22,1]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5692,3,22,1]]],[{},"modifiers",12,[[-64,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,5704,12,38,3]]],[{},"modifiers",12,[[-65,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5752,3,22,1]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5764,3,22,1]]],[{},"modifiers",12,[[-67,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,5776,88,38,22]]],[{},"modifiers",12,[[-68,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6128,3,22,1]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6140,3,22,1]]],[{},"modifiers",12,[[-70,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,6152,12,38,3]]],[{},"modifiers",12,[[-71,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6200,3,22,1]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6212,3,22,1]]],[{},"modifiers",12,[[-73,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,6224,12,38,3]]],[{},"modifiers",12,[[-74,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6272,3,22,1]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6284,3,22,1]]],[{},"modifiers",12,[[-76,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,6296,88,38,22]]],[{},"modifiers",12,[[-77,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6648,3,22,1]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6660,3,22,1]]],[{},"modifiers",12,[[-79,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,6672,88,38,22]]],[{},"modifiers",12,[[-80,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7024,3,22,1]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7036,3,22,1]]],[{},"modifiers",12,[[-82,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,7048,88,38,22]]],[{},"modifiers",12,[[-83,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7400,3,22,1]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7412,3,22,1]]],[{},"modifiers",12,[[-85,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,7424,88,38,22]]],[{},"modifiers",12,[[-86,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7776,3,22,1]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7788,3,22,1]]],[{},"modifiers",12,[[-88,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,7800,12,38,3]]],[{},"modifiers",12,[[-89,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7848,3,22,1]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7860,3,22,1]]],[{},"modifiers",12,[[-91,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,7872,12,38,3]]],[{},"modifiers",12,[[-92,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7920,3,22,1]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7932,3,22,1]]],[{},"modifiers",12,[[-94,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,7944,12,38,3]]],[{},"modifiers",12,[[-95,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7992,3,22,1]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8004,3,22,1]]],[{},"modifiers",12,[[-97,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,8016,12,38,3]]],[{},"modifiers",12,[[-98,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8064,3,22,1]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8076,3,22,1]]],[{},"modifiers",12,[[-100,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,8088,12,38,3]]],[{},"modifiers",12,[[-101,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8136,3,22,1]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8148,3,22,1]]],[{},"modifiers",12,[[-103,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,8160,88,38,22]]],[{},"modifiers",12,[[-104,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8512,3,22,1]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8524,3,22,1]]],[{},"modifiers",12,[[-106,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,8536,88,38,22]]],[{},"modifiers",12,[[-107,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8888,3,22,1]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8900,3,22,1]]],[{},"modifiers",12,[[-109,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,8912,12,38,3]]],[{},"modifiers",12,[[-110,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8960,3,22,1]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8972,3,22,1]]],[{},"modifiers",12,[[-112,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,8984,88,38,22]]],[{},"modifiers",12,[[-113,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9336,3,22,1]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9348,3,22,1]]],[{},"modifiers",12,[[-115,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,9360,88,38,22]]],[{},"modifiers",12,[[-116,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9712,3,22,1]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9724,3,22,1]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,9736,66,22,22]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,10000,88,38,22]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10352,3,22,1]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,10364,66,22,22]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,10628,88,38,22]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10980,3,22,1]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,10992,66,22,22]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,11256,88,38,22]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11608,3,22,1]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,11620,9,22,3]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,11656,12,38,3]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,11704,9,22,3]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,11740,66,22,22]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,12004,88,38,22]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12356,3,22,1]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,12368,9,22,3]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,12404,12,38,3]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12452,3,22,1]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12464,3,22,1]]],[{},"modifiers",12,[[-137,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12476,3,22,1]]],[{},"modifiers",12,[[-138,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12488,4,38,1]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12504,3,22,1]]],[{},"modifiers",12,[[-140,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12516,3,22,1]]],[{},"modifiers",12,[[-141,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12528,4,38,1]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12544,3,22,1]]],[{},"modifiers",12,[[-143,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12556,3,22,1]]],[{},"modifiers",12,[[-144,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12568,4,38,1]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12584,3,22,1]]],[{},"modifiers",12,[[-146,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12596,3,22,1]]],[{},"modifiers",12,[[-147,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12608,4,38,1]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12624,3,22,1]]],[{},"modifiers",12,[[-149,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12636,3,22,1]]],[{},"modifiers",12,[[-150,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12648,4,38,1]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12664,3,22,1]]],[{},"modifiers",12,[[-152,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12676,3,22,1]]],[{},"modifiers",12,[[-153,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12688,4,38,1]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12704,3,22,1]]],[{},"modifiers",12,[[-155,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12716,3,22,1]]],[{},"modifiers",12,[[-156,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12728,4,38,1]]],[{},"modifiers",12,[[-157,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12744,3,22,1]]],[{},"modifiers",12,[[-158,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12756,3,22,1]]],[{},"modifiers",12,[[-159,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12768,4,38,1]]],[{},"modifiers",12,[[-160,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12784,3,22,1]]],[{},"modifiers",12,[[-161,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12796,3,22,1]]],[{},"modifiers",12,[[-162,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12808,4,38,1]]],[{},"modifiers",12,[[-163,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12824,3,22,1]]],[{},"modifiers",12,[[-164,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12836,3,22,1]]],[{},"modifiers",12,[[-165,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12848,4,38,1]]],[{},"modifiers",12,[[-166,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12864,3,22,1]]],[{},"modifiers",12,[[-167,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12876,3,22,1]]],[{},"modifiers",12,[[-168,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12888,4,38,1]]],[{},"modifiers",12,[[-169,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12904,3,22,1]]],[{},"modifiers",12,[[-170,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12916,3,22,1]]],[{},"modifiers",12,[[-171,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12928,4,38,1]]],[{},"modifiers",12,[[-172,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12944,3,22,1]]],[{},"modifiers",12,[[-173,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12956,3,22,1]]],[{},"modifiers",12,[[-174,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12968,4,38,1]]],[{},"modifiers",12,[[-175,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12984,3,22,1]]],[{},"modifiers",12,[[-176,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12996,3,22,1]]],[{},"modifiers",12,[[-177,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13008,4,38,1]]],[{},"modifiers",12,[[-178,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13024,3,22,1]]],[{},"modifiers",12,[[-179,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13036,3,22,1]]],[{},"modifiers",12,[[-180,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13048,4,38,1]]],[{},"modifiers",12,[[-181,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13064,3,22,1]]],[{},"modifiers",12,[[-182,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13076,3,22,1]]],[{},"modifiers",12,[[-183,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13088,4,38,1]]],[{},"modifiers",12,[[-184,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13104,3,22,1]]],[{},"modifiers",12,[[-185,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13116,3,22,1]]],[{},"modifiers",12,[[-186,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13128,4,38,1]]],[{},"modifiers",12,[[-187,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13144,3,22,1]]],[{},"modifiers",12,[[-188,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13156,3,22,1]]],[{},"modifiers",12,[[-189,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13168,4,38,1]]],[{},"modifiers",12,[[-190,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13184,3,22,1]]],[{},"modifiers",12,[[-191,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13196,3,22,1]]],[{},"modifiers",12,[[-192,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13208,4,38,1]]],[{},"modifiers",12,[[-193,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13224,3,22,1]]],[{},"modifiers",12,[[-194,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13236,3,22,1]]],[{},"modifiers",12,[[-195,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13248,4,38,1]]],[{},"modifiers",12,[[-196,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13264,3,22,1]]],[{},"modifiers",12,[[-197,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13276,3,22,1]]],[{},"modifiers",12,[[-198,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13288,4,38,1]]],[{},"modifiers",12,[[-199,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13304,3,22,1]]],[{},"modifiers",12,[[-200,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13316,3,22,1]]],[{},"modifiers",12,[[-201,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13328,4,38,1]]],[{},"modifiers",12,[[-202,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13344,3,22,1]]],[{},"modifiers",12,[[-203,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13356,3,22,1]]],[{},"modifiers",12,[[-204,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13368,4,38,1]]],[{},"modifiers",12,[[-205,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13384,3,22,1]]],[{},"modifiers",12,[[-206,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13396,3,22,1]]],[{},"modifiers",12,[[-207,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13408,4,38,1]]],[{},"modifiers",12,[[-208,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13424,3,22,1]]],[{},"modifiers",12,[[-209,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13436,3,22,1]]],[{},"modifiers",12,[[-210,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13448,4,38,1]]],[{},"modifiers",12,[[-211,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13464,3,22,1]]],[{},"modifiers",12,[[-212,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13476,3,22,1]]],[{},"modifiers",12,[[-213,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13488,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[2,"PlayerCtrl/Root/Hips"],[2,"PlayerCtrl/Root/Hips/Spine"],[2,"PlayerCtrl/Root/Hips/Spine/Head"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow3"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK/LeftLowerArm_2_FK/LeftWrist_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK/LeftLowerArm2_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK/LeftLowerArm2_IK/LeftWrist_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK/RightLowerArm2_FK/RightWrist_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK/RightLowerArm2_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK/RightLowerArm2_IK/RightWrist_IK"],[2,"PlayerCtrl/Root/Hips/HipSway"],[2,"PlayerCtrl/Root/Hips/HipSway/LeftLeg"],[2,"PlayerCtrl/Root/Hips/HipSway/RightLeg"],[2,"PlayerCtrl/Root/Hips/Tail1/Tail2"],[2,"PlayerCtrl/Ctrl_Grp"],[2,"PlayerCtrl/Ctrl_Grp/Gun"],[2,"PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch"],[2,"Gun"],[2,"PlayerCtrl"],[2,"PlayerCtrl/Root"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5/HatEnd"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3/LeftBrow3End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2/LeftBrow2End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1/LeftBrow1End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow1/RightBrow1End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow2/RightBrow2End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow3/RightBrow3End"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1/LeftHand2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1/LeftThumb2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK/LeftLowerArm_2_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1/RightHand2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1/RightThumb2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK/RightLowerArm2_FK"],[2,"PlayerCtrl/Root/Hips/HipSway/LeftLeg/LeftToe"],[2,"PlayerCtrl/Root/Hips/HipSway/RightLeg/RightToe"],[2,"PlayerCtrl/Root/Hips/Tail1"],[2,"PlayerCtrl/Root/Hips/Tail1/Tail2/Tail3"],[2,"PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch/GunBarrelEnd"],[2,"Player"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,0,-1,53,0,-1,53,0,-1,53,0,-1,54,0,-1,54,0,-1,54,0,-1,55,0,-1,55,0,-1,55,0,-1,56,0,-1,56,0,-1,56,0,-1,57,0,-1,57,0,-1,57,0,-1,58,0,-1,58,0,-1,58,0,-1,59,0,-1,59,0,-1,59,0,-1,60,0,-1,60,0,-1,60,0,-1,61,0,-1,61,0,-1,61,0,-1,62,0,-1,62,0,-1,62,0,-1,63,0,-1,63,0,-1,63,0,-1,64,0,-1,64,0,-1,64,0,-1,65,0,-1,65,0,-1,65,0,-1,66,0,-1,66,0,-1,66,0,-1,67,0,-1,67,0,-1,67,0,-1,68,0,-1,68,0,-1,68,0,-1,69,0,-1,69,0,-1,69,0,-1,70,0,-1,70,0,-1,70,0,-1,71,0,-1,71,0,-1,71,213],[],[],[]],[[[60,"Skin-0",4115933189,["PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch","PlayerCtrl/Ctrl_Grp/Gun"],[[[7,6.123234262925839e-17,-1,-1.0616463304302472e-20,0,1,6.123234262925839e-17,-0.0001733800017973408,0,0.0001733800017973408,1.5507313631061355e-37,1,0,-41.406864166259766,-28.4610595703125,-39.59281921386719,1],[7,1.2008641692033495e-17,-1,-6.004326718999097e-17,0,0.19611600041389465,6.123234262925839e-17,-0.9805809855461121,0,0.9805809855461121,-5.3023280821930165e-33,0.19611600041389465,0,-17.609500885009766,-28.461061477661133,34.8415412902832,1]],8,8]]],0,0,[],[],[]],[[[31,".bin",114498,1826437842,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":52128,"length":6084,"count":3042,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":108540,"length":5958,"count":2979,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":52128,"count":724,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":58212,"length":50328,"count":699,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,10,12,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],[0,2,3,4,5,6,7,8,14,15,16,22,23,25,27,28,29,30,31,32,33,34,35,36,37]]},"minPosition",8,[1,-89.48932647705078,-0.032199859619140625,-62.85764694213867],"maxPosition",8,[1,30.660633087158203,131.46469116210938,29.071054458618164]]]],0,0,[],[],[]],[[[52,"Idle",".bin",30,2,12.5,1585171782,[[0,98624,2,6,2],[0,98632,302,6,302],[0,99840,300,6,300],[0,101040,96,6,96],[0,101424,272,6,272],[0,102512,207,6,207],[0,103340,276,6,276],[0,104444,300,6,300],[0,105644,2,6,2],[0,105652,2,6,2],[0,105660,2,6,2],[0,105668,2,6,2],[0,105676,2,6,2],[0,105684,2,6,2],[0,105692,302,6,302],[0,106900,87,6,87],[0,107248,301,6,301],[0,108452,2,6,2],[0,108460,2,6,2],[0,108468,128,6,128],[0,108980,130,6,130],[0,109500,128,6,128],[0,110012,302,6,302],[0,111220,26,6,26],[0,111324,2,6,2],[0,111332,301,6,301],[0,112536,302,6,302],[0,113744,262,6,262],[0,114792,302,6,302],[0,116000,2,6,2],[0,116008,2,6,2],[0,116016,2,6,2],[0,116024,2,6,2],[0,116032,2,6,2],[0,116040,302,6,302],[0,117248,262,6,262],[0,118296,2,6,2],[0,118304,302,6,302],[0,119512,173,6,173],[0,120204,2,6,2],[0,120212,2,6,2],[0,120220,2,6,2],[0,120228,2,6,2],[0,120236,67,6,67],[0,120504,2,6,2]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[50,6,22,2]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,24,8,38,2]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,56,3,22,1]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,68,906,22,302]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,3692,1208,38,302]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8524,3,22,1]]],[{},"modifiers",12,[[-7,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,8536,1200,38,300]]],[{},"modifiers",12,[[-8,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13336,3,22,1]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13348,3,22,1]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,13360,288,22,96]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,14512,384,38,96]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,16048,3,22,1]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,16060,816,22,272]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,19324,1088,38,272]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23676,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,23688,828,38,207]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,27000,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,27012,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,27024,1104,38,276]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31440,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31452,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,31464,1200,38,300]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36264,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36276,3,22,1]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,36288,6,22,2]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,36312,8,38,2]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36344,3,22,1]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,36356,6,22,2]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,36380,8,38,2]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36412,3,22,1]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,36424,6,22,2]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,36448,8,38,2]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36480,3,22,1]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,36492,6,22,2]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,36516,8,38,2]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36548,3,22,1]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,36560,6,22,2]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,36584,8,38,2]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36616,3,22,1]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,36628,6,22,2]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,36652,8,38,2]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,36684,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,36696,1208,38,302]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,41528,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,41540,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,41552,348,38,87]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,42944,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,42956,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,42968,1204,38,301]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,47784,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,47796,3,22,1]]],[{},"modifiers",12,[[-52,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,47808,8,38,2]]],[{},"modifiers",12,[[-53,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,47840,3,22,1]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,47852,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,47864,8,38,2]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,47896,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,47908,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,47920,512,38,128]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,49968,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,49980,3,22,1]]],[{},"modifiers",12,[[-61,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,49992,520,38,130]]],[{},"modifiers",12,[[-62,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,52072,3,22,1]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,52084,3,22,1]]],[{},"modifiers",12,[[-64,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,52096,512,38,128]]],[{},"modifiers",12,[[-65,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,54144,3,22,1]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,54156,3,22,1]]],[{},"modifiers",12,[[-67,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,54168,1208,38,302]]],[{},"modifiers",12,[[-68,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,59000,3,22,1]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,59012,3,22,1]]],[{},"modifiers",12,[[-70,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,59024,104,38,26]]],[{},"modifiers",12,[[-71,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,59440,3,22,1]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,59452,3,22,1]]],[{},"modifiers",12,[[-73,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,59464,8,38,2]]],[{},"modifiers",12,[[-74,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,59496,3,22,1]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,59508,3,22,1]]],[{},"modifiers",12,[[-76,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,59520,1204,38,301]]],[{},"modifiers",12,[[-77,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,64336,3,22,1]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,64348,3,22,1]]],[{},"modifiers",12,[[-79,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,64360,1208,38,302]]],[{},"modifiers",12,[[-80,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69192,3,22,1]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69204,3,22,1]]],[{},"modifiers",12,[[-82,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,69216,1048,38,262]]],[{},"modifiers",12,[[-83,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,73408,3,22,1]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,73420,3,22,1]]],[{},"modifiers",12,[[-85,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,73432,1208,38,302]]],[{},"modifiers",12,[[-86,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78264,3,22,1]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78276,3,22,1]]],[{},"modifiers",12,[[-88,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,78288,8,38,2]]],[{},"modifiers",12,[[-89,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78320,3,22,1]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78332,3,22,1]]],[{},"modifiers",12,[[-91,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,78344,8,38,2]]],[{},"modifiers",12,[[-92,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78376,3,22,1]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78388,3,22,1]]],[{},"modifiers",12,[[-94,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,78400,8,38,2]]],[{},"modifiers",12,[[-95,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78432,3,22,1]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78444,3,22,1]]],[{},"modifiers",12,[[-97,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,78456,8,38,2]]],[{},"modifiers",12,[[-98,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78488,3,22,1]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78500,3,22,1]]],[{},"modifiers",12,[[-100,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,78512,8,38,2]]],[{},"modifiers",12,[[-101,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78544,3,22,1]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,78556,3,22,1]]],[{},"modifiers",12,[[-103,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,78568,1208,38,302]]],[{},"modifiers",12,[[-104,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,83400,3,22,1]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,83412,3,22,1]]],[{},"modifiers",12,[[-106,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,83424,1048,38,262]]],[{},"modifiers",12,[[-107,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,87616,3,22,1]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,87628,3,22,1]]],[{},"modifiers",12,[[-109,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,87640,8,38,2]]],[{},"modifiers",12,[[-110,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,87672,3,22,1]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,87684,3,22,1]]],[{},"modifiers",12,[[-112,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,87696,1208,38,302]]],[{},"modifiers",12,[[-113,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,92528,3,22,1]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,92540,3,22,1]]],[{},"modifiers",12,[[-115,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,92552,692,38,173]]],[{},"modifiers",12,[[-116,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,95320,3,22,1]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,95332,3,22,1]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,95344,6,22,2]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,95368,8,38,2]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,95400,3,22,1]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,95412,6,22,2]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,95436,8,38,2]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,95468,3,22,1]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,95480,6,22,2]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,95504,8,38,2]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,95536,3,22,1]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,95548,6,22,2]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,95572,8,38,2]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,95604,6,22,2]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,95628,201,22,67]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,96432,268,38,67]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97504,3,22,1]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,97516,6,22,2]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,97540,8,38,2]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97572,3,22,1]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97584,3,22,1]]],[{},"modifiers",12,[[-137,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97596,3,22,1]]],[{},"modifiers",12,[[-138,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97608,4,38,1]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97624,3,22,1]]],[{},"modifiers",12,[[-140,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97636,3,22,1]]],[{},"modifiers",12,[[-141,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97648,4,38,1]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97664,3,22,1]]],[{},"modifiers",12,[[-143,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97676,3,22,1]]],[{},"modifiers",12,[[-144,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97688,4,38,1]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97704,3,22,1]]],[{},"modifiers",12,[[-146,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97716,3,22,1]]],[{},"modifiers",12,[[-147,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97728,4,38,1]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97744,3,22,1]]],[{},"modifiers",12,[[-149,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97756,3,22,1]]],[{},"modifiers",12,[[-150,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97768,4,38,1]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97784,3,22,1]]],[{},"modifiers",12,[[-152,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97796,3,22,1]]],[{},"modifiers",12,[[-153,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97808,4,38,1]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97824,3,22,1]]],[{},"modifiers",12,[[-155,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97836,3,22,1]]],[{},"modifiers",12,[[-156,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97848,4,38,1]]],[{},"modifiers",12,[[-157,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97864,3,22,1]]],[{},"modifiers",12,[[-158,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97876,3,22,1]]],[{},"modifiers",12,[[-159,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97888,4,38,1]]],[{},"modifiers",12,[[-160,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97904,3,22,1]]],[{},"modifiers",12,[[-161,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97916,3,22,1]]],[{},"modifiers",12,[[-162,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97928,4,38,1]]],[{},"modifiers",12,[[-163,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97944,3,22,1]]],[{},"modifiers",12,[[-164,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97956,3,22,1]]],[{},"modifiers",12,[[-165,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97968,4,38,1]]],[{},"modifiers",12,[[-166,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97984,3,22,1]]],[{},"modifiers",12,[[-167,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,97996,3,22,1]]],[{},"modifiers",12,[[-168,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98008,4,38,1]]],[{},"modifiers",12,[[-169,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98024,3,22,1]]],[{},"modifiers",12,[[-170,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98036,3,22,1]]],[{},"modifiers",12,[[-171,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98048,4,38,1]]],[{},"modifiers",12,[[-172,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98064,3,22,1]]],[{},"modifiers",12,[[-173,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98076,3,22,1]]],[{},"modifiers",12,[[-174,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98088,4,38,1]]],[{},"modifiers",12,[[-175,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98104,3,22,1]]],[{},"modifiers",12,[[-176,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98116,3,22,1]]],[{},"modifiers",12,[[-177,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98128,4,38,1]]],[{},"modifiers",12,[[-178,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98144,3,22,1]]],[{},"modifiers",12,[[-179,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98156,3,22,1]]],[{},"modifiers",12,[[-180,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98168,4,38,1]]],[{},"modifiers",12,[[-181,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98184,3,22,1]]],[{},"modifiers",12,[[-182,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98196,3,22,1]]],[{},"modifiers",12,[[-183,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98208,4,38,1]]],[{},"modifiers",12,[[-184,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98224,3,22,1]]],[{},"modifiers",12,[[-185,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98236,3,22,1]]],[{},"modifiers",12,[[-186,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98248,4,38,1]]],[{},"modifiers",12,[[-187,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98264,3,22,1]]],[{},"modifiers",12,[[-188,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98276,3,22,1]]],[{},"modifiers",12,[[-189,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98288,4,38,1]]],[{},"modifiers",12,[[-190,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98304,3,22,1]]],[{},"modifiers",12,[[-191,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98316,3,22,1]]],[{},"modifiers",12,[[-192,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98328,4,38,1]]],[{},"modifiers",12,[[-193,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98344,3,22,1]]],[{},"modifiers",12,[[-194,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98356,3,22,1]]],[{},"modifiers",12,[[-195,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98368,4,38,1]]],[{},"modifiers",12,[[-196,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98384,3,22,1]]],[{},"modifiers",12,[[-197,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98396,3,22,1]]],[{},"modifiers",12,[[-198,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98408,4,38,1]]],[{},"modifiers",12,[[-199,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98424,3,22,1]]],[{},"modifiers",12,[[-200,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98436,3,22,1]]],[{},"modifiers",12,[[-201,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98448,4,38,1]]],[{},"modifiers",12,[[-202,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98464,3,22,1]]],[{},"modifiers",12,[[-203,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98476,3,22,1]]],[{},"modifiers",12,[[-204,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98488,4,38,1]]],[{},"modifiers",12,[[-205,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98504,3,22,1]]],[{},"modifiers",12,[[-206,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98516,3,22,1]]],[{},"modifiers",12,[[-207,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98528,4,38,1]]],[{},"modifiers",12,[[-208,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98544,3,22,1]]],[{},"modifiers",12,[[-209,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98556,3,22,1]]],[{},"modifiers",12,[[-210,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98568,4,38,1]]],[{},"modifiers",12,[[-211,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98584,3,22,1]]],[{},"modifiers",12,[[-212,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98596,3,22,1]]],[{},"modifiers",12,[[-213,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,98608,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[2,"PlayerCtrl/Root/Hips"],[2,"PlayerCtrl/Root/Hips/Spine"],[2,"PlayerCtrl/Root/Hips/Spine/Head"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow3"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK/LeftLowerArm_2_FK/LeftWrist_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK/LeftLowerArm2_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK/LeftLowerArm2_IK/LeftWrist_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK/RightLowerArm2_FK/RightWrist_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK/RightLowerArm2_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK/RightLowerArm2_IK/RightWrist_IK"],[2,"PlayerCtrl/Root/Hips/HipSway"],[2,"PlayerCtrl/Root/Hips/HipSway/LeftLeg"],[2,"PlayerCtrl/Root/Hips/HipSway/RightLeg"],[2,"PlayerCtrl/Root/Hips/Tail1/Tail2"],[2,"PlayerCtrl/Ctrl_Grp"],[2,"PlayerCtrl/Ctrl_Grp/Gun"],[2,"PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch"],[2,"Gun"],[2,"PlayerCtrl"],[2,"PlayerCtrl/Root"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5/HatEnd"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3/LeftBrow3End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2/LeftBrow2End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1/LeftBrow1End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow1/RightBrow1End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow2/RightBrow2End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow3/RightBrow3End"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1/LeftHand2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1/LeftThumb2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK/LeftLowerArm_2_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1/RightHand2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1/RightThumb2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK/RightLowerArm2_FK"],[2,"PlayerCtrl/Root/Hips/HipSway/LeftLeg/LeftToe"],[2,"PlayerCtrl/Root/Hips/HipSway/RightLeg/RightToe"],[2,"PlayerCtrl/Root/Hips/Tail1"],[2,"PlayerCtrl/Root/Hips/Tail1/Tail2/Tail3"],[2,"PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch/GunBarrelEnd"],[2,"Player"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,0,-1,53,0,-1,53,0,-1,53,0,-1,54,0,-1,54,0,-1,54,0,-1,55,0,-1,55,0,-1,55,0,-1,56,0,-1,56,0,-1,56,0,-1,57,0,-1,57,0,-1,57,0,-1,58,0,-1,58,0,-1,58,0,-1,59,0,-1,59,0,-1,59,0,-1,60,0,-1,60,0,-1,60,0,-1,61,0,-1,61,0,-1,61,0,-1,62,0,-1,62,0,-1,62,0,-1,63,0,-1,63,0,-1,63,0,-1,64,0,-1,64,0,-1,64,0,-1,65,0,-1,65,0,-1,65,0,-1,66,0,-1,66,0,-1,66,0,-1,67,0,-1,67,0,-1,67,0,-1,68,0,-1,68,0,-1,68,0,-1,69,0,-1,69,0,-1,69,0,-1,70,0,-1,70,0,-1,70,0,-1,71,0,-1,71,0,-1,71,213],[],[],[]],[[[74,"Death",".bin",30,4.166666666666668,2797420208,[[0,32660,62,6,62],[0,32908,55,6,55],[0,33128,55,6,55],[0,33348,58,6,58],[0,33580,58,6,58],[0,33812,63,6,63],[0,34064,63,6,63],[0,34316,63,6,63],[0,34568,15,6,15],[0,34628,15,6,15],[0,34688,15,6,15],[0,34748,15,6,15],[0,34808,15,6,15],[0,34868,15,6,15],[0,34928,63,6,63],[0,35180,33,6,33],[0,35312,63,6,63],[0,35564,2,6,2],[0,35572,2,6,2],[0,35580,2,6,2],[0,35588,2,6,2],[0,35596,2,6,2],[0,35604,63,6,63],[0,35856,33,6,33],[0,35988,2,6,2],[0,35996,63,6,63],[0,36248,63,6,63],[0,36500,62,6,62],[0,36748,63,6,63],[0,37000,2,6,2],[0,37008,2,6,2],[0,37016,2,6,2],[0,37024,2,6,2],[0,37032,2,6,2],[0,37040,63,6,63],[0,37292,62,6,62],[0,37540,2,6,2],[0,37548,63,6,63],[0,37800,55,6,55],[0,38020,55,6,55],[0,38240,55,6,55],[0,38460,44,6,44],[0,38636,2,6,2],[0,38644,35,6,35],[0,38784,2,6,2]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[50,186,22,62]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,744,248,38,62]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,1736,3,22,1]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,1748,165,22,55]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2408,220,38,55]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3288,3,22,1]]],[{},"modifiers",12,[[-7,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,3300,220,38,55]]],[{},"modifiers",12,[[-8,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4180,3,22,1]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4192,3,22,1]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,4204,174,22,58]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,4900,232,38,58]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5828,3,22,1]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,5840,174,22,58]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,6536,232,38,58]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7464,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,7476,252,38,63]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8484,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8496,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,8508,252,38,63]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9516,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9528,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,9540,252,38,63]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10548,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10560,3,22,1]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,10572,45,22,15]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,10752,60,38,15]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10992,3,22,1]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,11004,45,22,15]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,11184,60,38,15]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11424,3,22,1]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,11436,45,22,15]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,11616,60,38,15]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11856,3,22,1]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,11868,45,22,15]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,12048,60,38,15]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12288,3,22,1]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,12300,45,22,15]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,12480,60,38,15]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12720,3,22,1]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,12732,45,22,15]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,12912,60,38,15]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13152,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,13164,252,38,63]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14172,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14184,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,14196,132,38,33]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14724,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14736,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,14748,252,38,63]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15756,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15768,3,22,1]]],[{},"modifiers",12,[[-52,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,15780,8,38,2]]],[{},"modifiers",12,[[-53,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15812,3,22,1]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15824,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,15836,8,38,2]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15868,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15880,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,15892,8,38,2]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15924,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15936,3,22,1]]],[{},"modifiers",12,[[-61,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,15948,8,38,2]]],[{},"modifiers",12,[[-62,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15980,3,22,1]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15992,3,22,1]]],[{},"modifiers",12,[[-64,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,16004,8,38,2]]],[{},"modifiers",12,[[-65,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,16036,3,22,1]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,16048,3,22,1]]],[{},"modifiers",12,[[-67,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,16060,252,38,63]]],[{},"modifiers",12,[[-68,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,17068,3,22,1]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,17080,3,22,1]]],[{},"modifiers",12,[[-70,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,17092,132,38,33]]],[{},"modifiers",12,[[-71,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,17620,3,22,1]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,17632,3,22,1]]],[{},"modifiers",12,[[-73,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,17644,8,38,2]]],[{},"modifiers",12,[[-74,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,17676,3,22,1]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,17688,3,22,1]]],[{},"modifiers",12,[[-76,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,17700,252,38,63]]],[{},"modifiers",12,[[-77,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,18708,3,22,1]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,18720,3,22,1]]],[{},"modifiers",12,[[-79,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,18732,252,38,63]]],[{},"modifiers",12,[[-80,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,19740,3,22,1]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,19752,3,22,1]]],[{},"modifiers",12,[[-82,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,19764,248,38,62]]],[{},"modifiers",12,[[-83,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,20756,3,22,1]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,20768,3,22,1]]],[{},"modifiers",12,[[-85,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,20780,252,38,63]]],[{},"modifiers",12,[[-86,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21788,3,22,1]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21800,3,22,1]]],[{},"modifiers",12,[[-88,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,21812,8,38,2]]],[{},"modifiers",12,[[-89,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21844,3,22,1]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21856,3,22,1]]],[{},"modifiers",12,[[-91,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,21868,8,38,2]]],[{},"modifiers",12,[[-92,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21900,3,22,1]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21912,3,22,1]]],[{},"modifiers",12,[[-94,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,21924,8,38,2]]],[{},"modifiers",12,[[-95,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21956,3,22,1]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,21968,3,22,1]]],[{},"modifiers",12,[[-97,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,21980,8,38,2]]],[{},"modifiers",12,[[-98,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22012,3,22,1]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22024,3,22,1]]],[{},"modifiers",12,[[-100,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,22036,8,38,2]]],[{},"modifiers",12,[[-101,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22068,3,22,1]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22080,3,22,1]]],[{},"modifiers",12,[[-103,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,22092,252,38,63]]],[{},"modifiers",12,[[-104,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23100,3,22,1]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23112,3,22,1]]],[{},"modifiers",12,[[-106,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,23124,248,38,62]]],[{},"modifiers",12,[[-107,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,24116,3,22,1]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,24128,3,22,1]]],[{},"modifiers",12,[[-109,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,24140,8,38,2]]],[{},"modifiers",12,[[-110,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,24172,3,22,1]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,24184,3,22,1]]],[{},"modifiers",12,[[-112,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,24196,252,38,63]]],[{},"modifiers",12,[[-113,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,25204,3,22,1]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,25216,3,22,1]]],[{},"modifiers",12,[[-115,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,25228,220,38,55]]],[{},"modifiers",12,[[-116,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,26108,3,22,1]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,26120,3,22,1]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,26132,165,22,55]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,26792,220,38,55]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,27672,3,22,1]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,27684,165,22,55]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,28344,220,38,55]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,29224,3,22,1]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,29236,132,22,44]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,29764,176,38,44]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,30468,3,22,1]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,30480,6,22,2]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,30504,8,38,2]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,30536,6,22,2]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,30560,105,22,35]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,30980,140,38,35]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31540,3,22,1]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,31552,6,22,2]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,31576,8,38,2]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31608,3,22,1]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31620,3,22,1]]],[{},"modifiers",12,[[-137,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31632,3,22,1]]],[{},"modifiers",12,[[-138,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31644,4,38,1]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31660,3,22,1]]],[{},"modifiers",12,[[-140,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31672,3,22,1]]],[{},"modifiers",12,[[-141,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31684,4,38,1]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31700,3,22,1]]],[{},"modifiers",12,[[-143,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31712,3,22,1]]],[{},"modifiers",12,[[-144,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31724,4,38,1]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31740,3,22,1]]],[{},"modifiers",12,[[-146,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31752,3,22,1]]],[{},"modifiers",12,[[-147,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31764,4,38,1]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31780,3,22,1]]],[{},"modifiers",12,[[-149,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31792,3,22,1]]],[{},"modifiers",12,[[-150,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31804,4,38,1]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31820,3,22,1]]],[{},"modifiers",12,[[-152,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31832,3,22,1]]],[{},"modifiers",12,[[-153,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31844,4,38,1]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31860,3,22,1]]],[{},"modifiers",12,[[-155,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31872,3,22,1]]],[{},"modifiers",12,[[-156,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31884,4,38,1]]],[{},"modifiers",12,[[-157,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31900,3,22,1]]],[{},"modifiers",12,[[-158,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31912,3,22,1]]],[{},"modifiers",12,[[-159,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31924,4,38,1]]],[{},"modifiers",12,[[-160,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31940,3,22,1]]],[{},"modifiers",12,[[-161,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31952,3,22,1]]],[{},"modifiers",12,[[-162,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31964,4,38,1]]],[{},"modifiers",12,[[-163,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31980,3,22,1]]],[{},"modifiers",12,[[-164,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31992,3,22,1]]],[{},"modifiers",12,[[-165,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32004,4,38,1]]],[{},"modifiers",12,[[-166,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32020,3,22,1]]],[{},"modifiers",12,[[-167,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32032,3,22,1]]],[{},"modifiers",12,[[-168,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32044,4,38,1]]],[{},"modifiers",12,[[-169,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32060,3,22,1]]],[{},"modifiers",12,[[-170,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32072,3,22,1]]],[{},"modifiers",12,[[-171,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32084,4,38,1]]],[{},"modifiers",12,[[-172,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32100,3,22,1]]],[{},"modifiers",12,[[-173,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32112,3,22,1]]],[{},"modifiers",12,[[-174,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32124,4,38,1]]],[{},"modifiers",12,[[-175,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32140,3,22,1]]],[{},"modifiers",12,[[-176,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32152,3,22,1]]],[{},"modifiers",12,[[-177,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32164,4,38,1]]],[{},"modifiers",12,[[-178,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32180,3,22,1]]],[{},"modifiers",12,[[-179,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32192,3,22,1]]],[{},"modifiers",12,[[-180,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32204,4,38,1]]],[{},"modifiers",12,[[-181,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32220,3,22,1]]],[{},"modifiers",12,[[-182,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32232,3,22,1]]],[{},"modifiers",12,[[-183,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32244,4,38,1]]],[{},"modifiers",12,[[-184,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32260,3,22,1]]],[{},"modifiers",12,[[-185,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32272,3,22,1]]],[{},"modifiers",12,[[-186,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32284,4,38,1]]],[{},"modifiers",12,[[-187,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32300,3,22,1]]],[{},"modifiers",12,[[-188,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32312,3,22,1]]],[{},"modifiers",12,[[-189,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32324,4,38,1]]],[{},"modifiers",12,[[-190,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32340,3,22,1]]],[{},"modifiers",12,[[-191,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32352,3,22,1]]],[{},"modifiers",12,[[-192,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32364,4,38,1]]],[{},"modifiers",12,[[-193,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32380,3,22,1]]],[{},"modifiers",12,[[-194,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32392,3,22,1]]],[{},"modifiers",12,[[-195,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32404,4,38,1]]],[{},"modifiers",12,[[-196,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32420,3,22,1]]],[{},"modifiers",12,[[-197,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32432,3,22,1]]],[{},"modifiers",12,[[-198,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32444,4,38,1]]],[{},"modifiers",12,[[-199,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32460,3,22,1]]],[{},"modifiers",12,[[-200,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32472,3,22,1]]],[{},"modifiers",12,[[-201,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32484,4,38,1]]],[{},"modifiers",12,[[-202,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32500,3,22,1]]],[{},"modifiers",12,[[-203,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32512,3,22,1]]],[{},"modifiers",12,[[-204,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32524,4,38,1]]],[{},"modifiers",12,[[-205,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32540,3,22,1]]],[{},"modifiers",12,[[-206,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32552,3,22,1]]],[{},"modifiers",12,[[-207,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32564,4,38,1]]],[{},"modifiers",12,[[-208,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32580,3,22,1]]],[{},"modifiers",12,[[-209,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32592,3,22,1]]],[{},"modifiers",12,[[-210,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32604,4,38,1]]],[{},"modifiers",12,[[-211,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32620,3,22,1]]],[{},"modifiers",12,[[-212,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32632,3,22,1]]],[{},"modifiers",12,[[-213,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,32644,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[2,"PlayerCtrl/Root/Hips"],[2,"PlayerCtrl/Root/Hips/Spine"],[2,"PlayerCtrl/Root/Hips/Spine/Head"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow1"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow2"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow3"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK/LeftLowerArm_2_FK/LeftWrist_FK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK/LeftLowerArm2_IK"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_IK/LeftLowerArm_IK/LeftLowerArm2_IK/LeftWrist_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK/RightLowerArm2_FK/RightWrist_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK/RightLowerArm2_IK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_IK/RightLowerArm_IK/RightLowerArm2_IK/RightWrist_IK"],[2,"PlayerCtrl/Root/Hips/HipSway"],[2,"PlayerCtrl/Root/Hips/HipSway/LeftLeg"],[2,"PlayerCtrl/Root/Hips/HipSway/RightLeg"],[2,"PlayerCtrl/Root/Hips/Tail1/Tail2"],[2,"PlayerCtrl/Ctrl_Grp"],[2,"PlayerCtrl/Ctrl_Grp/Gun"],[2,"PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch"],[2,"Gun"],[2,"PlayerCtrl"],[2,"PlayerCtrl/Root"],[2,"PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5/HatEnd"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3/LeftBrow3End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2/LeftBrow2End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1/LeftBrow1End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow1/RightBrow1End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow2/RightBrow2End"],[2,"PlayerCtrl/Root/Hips/Spine/Head/RightBrow3/RightBrow3End"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1/LeftHand2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1/LeftThumb2"],[2,"PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm_FK/LeftLowerArm_FK/LeftLowerArm_2_FK"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1/RightHand2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1/RightThumb2"],[2,"PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm_FK/RightLowerArm_FK/RightLowerArm2_FK"],[2,"PlayerCtrl/Root/Hips/HipSway/LeftLeg/LeftToe"],[2,"PlayerCtrl/Root/Hips/HipSway/RightLeg/RightToe"],[2,"PlayerCtrl/Root/Hips/Tail1"],[2,"PlayerCtrl/Root/Hips/Tail1/Tail2/Tail3"],[2,"PlayerCtrl/Ctrl_Grp/Gun/GunBarrelStretch/GunBarrelEnd"],[2,"Player"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,0,-1,53,0,-1,53,0,-1,53,0,-1,54,0,-1,54,0,-1,54,0,-1,55,0,-1,55,0,-1,55,0,-1,56,0,-1,56,0,-1,56,0,-1,57,0,-1,57,0,-1,57,0,-1,58,0,-1,58,0,-1,58,0,-1,59,0,-1,59,0,-1,59,0,-1,60,0,-1,60,0,-1,60,0,-1,61,0,-1,61,0,-1,61,0,-1,62,0,-1,62,0,-1,62,0,-1,63,0,-1,63,0,-1,63,0,-1,64,0,-1,64,0,-1,64,0,-1,65,0,-1,65,0,-1,65,0,-1,66,0,-1,66,0,-1,66,0,-1,67,0,-1,67,0,-1,67,0,-1,68,0,-1,68,0,-1,68,0,-1,69,0,-1,69,0,-1,69,0,-1,70,0,-1,70,0,-1,70,0,-1,71,0,-1,71,0,-1,71,213],[],[],[]],[[[31,".bin",107856,146089233,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":94104,"length":13752,"count":3438,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":94104,"count":1307,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-32.89970779418945,12.014476776123047,-38.15906524658203],"maxPosition",8,[1,-24.022411346435547,54.90476608276367,101.53285217285156]]]],0,0,[],[],[]],[[[60,"Skin-1",3849039288,["PlayerCtrl/Root/Hips","PlayerCtrl/Root","PlayerCtrl/Root/Hips/Spine","PlayerCtrl/Root/Hips/Spine/Head","PlayerCtrl/Root/Hips/Spine/Head/Hat1","PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2","PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3","PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4","PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5","PlayerCtrl/Root/Hips/Spine/Head/Hat1/Hat2/Hat3/Hat4/Hat5/HatEnd","PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3","PlayerCtrl/Root/Hips/Spine/Head/LeftBrow3/LeftBrow3End","PlayerCtrl/Root/Hips/Spine/Head/LeftBrow2","PlayerCtrl/Root/Hips/Spine/Head/LeftBrow1","PlayerCtrl/Root/Hips/Spine/Head/RightBrow1","PlayerCtrl/Root/Hips/Spine/Head/RightBrow2","PlayerCtrl/Root/Hips/Spine/Head/RightBrow3","PlayerCtrl/Root/Hips/Spine/Head/RightBrow3/RightBrow3End","PlayerCtrl/Root/Hips/Spine/LeftShoulder","PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm","PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm","PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2","PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist","PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftHand1","PlayerCtrl/Root/Hips/Spine/LeftShoulder/LeftUpperArm/LeftLowerArm/LeftLowerArm2/LeftWrist/LeftThumb1","PlayerCtrl/Root/Hips/Spine/RightShoulder","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightHand1","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1","PlayerCtrl/Root/Hips/Spine/RightShoulder/RightUpperArm/RightLowerArm/RightLowerArm2/RightWrist/RightThumb1/RightThumb2","PlayerCtrl/Root/Hips/HipSway","PlayerCtrl/Root/Hips/HipSway/LeftLeg","PlayerCtrl/Root/Hips/HipSway/RightLeg","PlayerCtrl/Root/Hips/Tail1","PlayerCtrl/Root/Hips/Tail1/Tail2"],[[[7,1,0,0,0,0,0.05894229933619499,0.9982609748840332,0,0,-0.9982609748840332,0.05894229933619499,0,0,-6.607940196990967,-8.31337833404541,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0.028209129348397255,0,1],[7,0.32000577449798584,0.8709449768066406,-0.37289726734161377,0,0.0667324885725975,0.37189608812332153,0.9258728623390198,0,0.945063054561615,-0.3211689889431,0.06088850274682045,0,10.92898941040039,-14.364165306091309,-26.44529914855957,1],[7,0.920892059803009,0.21421000361442566,-0.3256880044937134,0,0.28690803050994873,0.19315800070762634,0.9382820129394531,0,0.2638988196849823,-0.9574990272521973,0.1164189800620079,0,-4.274046421051025,-20.28778076171875,-49.25563049316406,1],[7,0.8789160251617432,0.04471983015537262,-0.4748759865760803,0,0.3624967038631439,-0.7097007632255554,0.6040868163108826,0,-0.3100053071975708,-0.7030822038650513,-0.6399781703948975,0,-14.319469451904297,70.02452087402344,-80.35003662109375,1],[7,0.5335203409194946,-0.0354357585310936,-0.8450450301170349,0,-0.1102529913187027,-0.9935110211372375,-0.027946919202804565,0,-0.838570773601532,0.1080789640545845,-0.533964991569519,0,19.017871856689453,122.27706146240234,-53.05502700805664,1],[7,0.49595534801483154,0.5897684693336487,-0.6373389363288879,0,0.11387122422456741,-0.7718015313148499,-0.625584065914154,0,-0.8608487844467163,0.23768733441829681,-0.44993698596954346,0,-11.59674072265625,142.7374267578125,16.034957885742188,1],[7,-0.10594478249549866,0.9658998847007751,-0.23624831438064575,0,0.6269832849502563,-0.1195162832736969,-0.7698099613189697,0,-0.7717947959899902,-0.22968122363090515,-0.5929409265518188,0,-111.95811462402344,76.27332305908203,46.85026550292969,1],[7,-0.3480224609375,0.9373369812965393,0.01675073429942131,0,0.4829559326171875,0.19457344710826874,-0.8537529110908508,0,-0.8035128712654114,-0.28903573751449585,-0.5204081535339355,0,-117.21163177490234,38.184471130371094,65.27972412109375,1],[7,-0.34468021988868713,0.9366018772125244,-0.0630284771323204,0,0.396524578332901,0.08440887182950974,-0.9141351580619812,0,-0.8508610725402832,-0.34007662534713745,-0.4004794657230377,0,-111.0911636352539,46.09907531738281,62.50226593017578,1],[7,0.8095771670341492,-0.3075309991836548,0.5000100135803223,0,0.29583680629730225,0.9494540095329285,0.10496586561203003,0,-0.5070168972015381,0.06294337660074234,0.8596349954605103,0,-11.920225143432617,-75.82051849365234,-10.225261688232422,1],[7,0.7583019733428955,-0.17904213070869446,0.6268349885940552,0,0.22999516129493713,0.9731919765472412,-0.00026082564727403224,0,-0.6099839210510254,0.14436683058738708,0.7791520357131958,0,-4.309037685394287,-79.6737060546875,-18.611379623413086,1],[7,0.9349769949913025,-0.28700610995292664,0.2084360122680664,0,0.3248177766799927,0.9288721084594727,-0.17801706492900848,0,-0.14251838624477386,0.23414550721645355,0.9616990089416504,0,-15.807676315307617,-75.3558349609375,8.186299324035645,1],[7,0.9254480004310608,-0.2668309807777405,-0.26897600293159485,0,0.2812958061695099,0.9594879746437073,0.015999147668480873,0,0.25381025671958923,-0.09046817570924759,0.9630140066146851,0,-15.535762786865234,-75.0873794555664,-10.766714096069336,1],[7,0.9200100898742676,0.26683101058006287,0.28702500462532043,0,0.2815548777580261,-0.9594879746437073,-0.010494239628314972,0,0.2725968062877655,0.09046805649995804,-0.9578660130500793,0,7.562057971954346,75.08734893798828,10.688725471496582,1],[7,0.7567874789237976,0.3944348394870758,0.5212421417236328,0,0.19115674495697021,-0.8961071372032166,0.4005637466907501,0,0.6250845193862915,-0.20350277423858643,-0.7535620331764221,0,8.498128890991211,74.89161682128906,-11.338967323303223,1],[7,0.4765099287033081,0.3075307309627533,0.8236280083656311,0,0.0964108258485794,-0.9494540691375732,0.2987339198589325,0,0.873866081237793,-0.06294304132461548,-0.48207399249076843,0,6.363288402557373,75.82048034667969,4.5060811042785645,1],[7,0.3172852694988251,0.4499448835849762,0.8347950577735901,0,0.09628523141145706,-0.891014039516449,0.44365087151527405,0,0.9434289336204529,-0.06038545444607735,-0.3260290026664734,0,-0.7436922788619995,78.5275650024414,12.612772941589355,1],[7,0.08118029683828354,0.8498588800430298,0.5207209587097168,0,-0.9964060187339783,0.056532688438892365,0.06307379901409149,0,0.0241660475730896,-0.5239701271057129,0.8513940572738647,0,50.26419448852539,-2.5916666984558105,2.9542975425720215,1],[7,0.08252790570259094,0.6220530271530151,-0.7786128520965576,0,-0.6042525172233582,-0.590054988861084,-0.535456120967865,0,-0.7925073504447937,0.5146690011024475,0.3271811008453369,0,36.88958740234375,23.361452102661133,28.392236709594727,1],[7,0.08331853151321411,0.6220749616622925,-0.7785118818283081,0,-0.6031550765037537,-0.5904000401496887,-0.5363131165504456,0,-0.7932599186897278,0.5142490267753601,0.3260160982608795,0,36.85750198364258,23.381906509399414,13.471843719482422,1],[7,0.08110880851745605,0.6221010684967041,-0.7787241339683533,0,-0.6046749353408813,-0.5903809666633606,-0.5346198678016663,0,-0.7923320531845093,0.5142369866371155,0.3282839059829712,0,36.87664031982422,23.381664276123047,6.696505546569824,1],[7,-0.21325872838497162,0.6166278123855591,-0.7578198909759521,0,-0.005328747909516096,-0.7763861417770386,-0.6302351355552673,0,-0.9769810438156128,-0.13036495447158813,0.16885697841644287,0,13.276814460754395,41.10271072387695,6.3962225914001465,1],[7,-0.26355093717575073,0.4286021888256073,-0.8641997575759888,0,-0.032669126987457275,-0.899324893951416,-0.43605947494506836,0,-0.9640920162200928,-0.08669125288724899,0.2510199546813965,0,12.629591941833496,39.39577102661133,-12.69869327545166,1],[7,-0.6504513025283813,0.4520489573478699,-0.6103810667991638,0,-0.6596048474311829,-0.7346389889717102,0.1588321179151535,0,-0.37660983204841614,0.5059230923652649,0.7760199308395386,0,19.51207733154297,21.793046951293945,-37.57381820678711,1],[7,-0.09249319136142731,-0.9903099536895752,0.10358700156211853,0,0.9940469861030579,-0.08582179248332977,0.06711629778146744,0,-0.05757594853639603,0.10917816311120987,0.9923530220985413,0,-50.63780975341797,-2.2051007747650146,18.4085636138916,1],[7,-0.36047089099884033,-0.1783110350370407,0.9155689477920532,0,0.8650530576705933,-0.43107399344444275,0.2566289007663727,0,0.34891796112060547,0.8845229744911194,0.30963820219039917,0,-32.816036224365234,50.90962600708008,8.342194557189941,1],[7,-0.6774741411209106,0.7143109440803528,0.17546990513801575,0,0.7005228996276855,0.5538498163223267,0.4500209093093872,0,0.22427089512348175,0.427798330783844,-0.8756090402603149,0,-38.243865966796875,10.104541778564453,-51.45473098754883,1],[7,-0.6769726872444153,0.7143049240112305,0.17741705477237701,0,0.7017974257469177,0.5538338422775269,0.44805005192756653,0,0.22178460657596588,0.427828311920166,-0.8762279748916626,0,-38.3708610534668,10.106078147888184,-44.674171447753906,1],[7,0.22091709077358246,0.8131037354469299,0.5385699272155762,0,0.8462440371513367,-0.4343251585960388,0.3085990250110626,0,0.4848378896713257,0.387586385011673,-0.784034013748169,0,-12.503267288208008,49.37765121459961,-20.239728927612305,1],[7,0.2421926110982895,0.9138288497924805,0.32597479224205017,0,0.8675181865692139,-0.35441315174102783,0.3490050733089447,0,0.43446090817451477,0.19826240837574005,-0.8785990476608276,0,-13.691171646118164,45.56643295288086,-21.348928451538086,1],[7,0.6980101466178894,0.618026077747345,-0.36170002818107605,0,0.6229639053344727,-0.7731639742851257,-0.11888795346021652,0,-0.35312989354133606,-0.14234085381031036,-0.9246829748153687,0,-16.32825469970703,45.7634391784668,-24.11011505126953,1],[7,0.8683619499206543,-0.3239019215106964,-0.3755471408367157,0,0.1319974660873413,-0.5789901614189148,0.8045787215232849,0,-0.4780429005622864,-0.748236894607544,-0.4600183367729187,0,6.85794734954834,4.657687187194824,-51.56324768066406,1],[7,0.9999899864196777,0.0003832210204564035,0.0043559898622334,0,-0.0003717739600688219,0.9999960064888,-0.0026283999904990196,0,-0.004356980323791504,0.002626754343509674,0.999987006187439,0,-0.023375488817691803,-8.672340393066406,6.129199028015137,1],[7,-0.976750910282135,3.613161325688452e-8,0.21437600255012512,0,-0.20719346404075623,-0.25668004155158997,-0.9440270662307739,0,0.05502598360180855,-0.9664959907531738,0.2507127821445465,0,18.83365821838379,11.74685287475586,4.995155334472656,1],[7,-0.976750910282135,-3.613161325688452e-8,-0.21437600255012512,0,0.20719346404075623,-0.25668004155158997,-0.9440270662307739,0,-0.05502598360180855,-0.9664959907531738,0.2507127821445465,0,-18.83365821838379,11.74685287475586,4.995155334472656,1],[7,0.9999849796295166,-0.004208481404930353,-0.003404770279303193,0,-0.005048328544944525,-0.9520421624183655,-0.30592504143714905,0,-0.001954003470018506,0.3059375584125519,-0.952049970626831,0,-0.06862699240446091,18.223487854003906,-14.510027885437012,1],[7,0.9999949932098389,0.00035001026117242873,-0.003246679902076721,0,-0.0006601401255466044,-0.9520440697669983,-0.3059620261192322,0,-0.003198071848601103,0.30596277117729187,-0.9520379900932312,0,-0.1475706696510315,18.224008560180664,-26.09812355041504,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[61,"builtin-standard",[{"hash":3835610303,"name":"builtin-standard|standard-vs:vert|standard-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n        if (wPos.y < _FogTop) {\n            fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        } else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    } else {\n        if (wPos.y < _FogTop) {\n            float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        } else {\n            fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nfloat CC_TRANSFER_FOG(vec4 pos) {\n    #if CC_USE_FOG == 0\n        return LinearFog(pos);\n\t#elif CC_USE_FOG == 1\n        return ExpFog(pos);\n    #elif CC_USE_FOG == 2\n        return ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n        return LayeredFog(pos);\n    #endif\n    return 1.;\n}\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 1) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec3 a_color;\n  layout(location = 1) out vec3 v_color;\n#endif\nlayout(location = 2) out vec3 v_position;\nlayout(location = 3) out vec3 v_normal;\nlayout(location = 4) out vec2 v_uv;\nlayout(location = 5) out vec2 v_uv1;\nlayout(location = 6) out float v_fog_factor;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec2 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\n      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n#else\n      v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n#endif\n}\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_fog_factor = CC_TRANSFER_FOG(pos);\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 0, binding = 1) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if CC_USE_IBL\nlayout(set = 0, binding = 3) uniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\n#if CC_RECEIVE_SHADOW\nlayout(location = 0) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 2) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 4) uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n  float CCGetDirLightShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetDirLightShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    return shadow / 5.0;\n  }\n  float CCGetDirLightShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetDirLightShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\n#if CC_FORWARD_ADD\nlayout(set = 2, binding = 1) uniform CCForwardLight {\n  highp vec4 cc_lightPos[1];\n  vec4 cc_lightColor[1];\n  vec4 cc_lightSizeRangeAngle[1];\n  vec4 cc_lightDir[1];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5();\n      else shadowAttenuation = CCGetDirLightShadowFactorX1();\n      lightColor *= 1.0 - shadowAttenuation;\n    }\n    #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n#else\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L+V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.001);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      finalColor = s.lightmap.a * s.lightmap.rgb + (1.0 - s.lightmap.a) * finalColor;\n    #endif\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    finalColor *= (diffuseContrib + specularContrib);\n    float fAmb = 0.5 - N.y * 0.5;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec3 skyColor = mix(cc_ambientGround.rgb, cc_ambientSky.rgb, s.lightmap.rgb);\n      skyColor = s.lightmap.a * skyColor + (1.0 - s.lightmap.a) * cc_ambientSky.rgb;\n      vec3 ambDiff = mix(skyColor, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    #else\n      vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    #endif\n    finalColor += (ambDiff.rgb * diffuse);\n    #if CC_USE_IBL\n      vec3 R = normalize(reflect(-V, N));\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      finalColor += env * cc_ambientSky.w * specular;\n    #endif\n    finalColor = finalColor * s.occlusion;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.albedo.a);\n  }\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec2 v_luv;\nlayout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 2) in vec3 v_position;\nlayout(location = 4) in vec2 v_uv;\nlayout(location = 5) in vec2 v_uv1;\nlayout(location = 3) in vec3 v_normal;\nlayout(location = 6) in float v_fog_factor;\n#if USE_VERTEX_COLOR\n  layout(location = 1) in vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    s.lightmap = texture(cc_lightingMap, v_luv);\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n        if (wPos.y < _FogTop) {\n            fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        } else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    } else {\n        if (wPos.y < _FogTop) {\n            float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        } else {\n            fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nfloat CC_TRANSFER_FOG(vec4 pos) {\n    #if CC_USE_FOG == 0\n        return LinearFog(pos);\n\t#elif CC_USE_FOG == 1\n        return ExpFog(pos);\n    #elif CC_USE_FOG == 2\n        return ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n        return LayeredFog(pos);\n    #endif\n    return 1.;\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if USE_VERTEX_COLOR\n  in vec3 a_color;\n  out vec3 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\nout float v_fog_factor;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec2 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\n      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n#else\n      v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n#endif\n}\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_fog_factor = CC_TRANSFER_FOG(pos);\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\n#if CC_RECEIVE_SHADOW\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n  float CCGetDirLightShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetDirLightShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    return shadow / 5.0;\n  }\n  float CCGetDirLightShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetDirLightShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\n#if CC_FORWARD_ADD\nlayout(std140) uniform CCForwardLight {\n  highp vec4 cc_lightPos[1];\n  vec4 cc_lightColor[1];\n  vec4 cc_lightSizeRangeAngle[1];\n  vec4 cc_lightDir[1];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5();\n      else shadowAttenuation = CCGetDirLightShadowFactorX1();\n      lightColor *= 1.0 - shadowAttenuation;\n    }\n    #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n#else\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L+V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.001);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      finalColor = s.lightmap.a * s.lightmap.rgb + (1.0 - s.lightmap.a) * finalColor;\n    #endif\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    finalColor *= (diffuseContrib + specularContrib);\n    float fAmb = 0.5 - N.y * 0.5;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec3 skyColor = mix(cc_ambientGround.rgb, cc_ambientSky.rgb, s.lightmap.rgb);\n      skyColor = s.lightmap.a * skyColor + (1.0 - s.lightmap.a) * cc_ambientSky.rgb;\n      vec3 ambDiff = mix(skyColor, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    #else\n      vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    #endif\n    finalColor += (ambDiff.rgb * diffuse);\n    #if CC_USE_IBL\n      vec3 R = normalize(reflect(-V, N));\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      finalColor += env * cc_ambientSky.w * specular;\n    #endif\n    finalColor = finalColor * s.occlusion;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.albedo.a);\n  }\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec2 v_luv;\nuniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\nin float v_fog_factor;\n#if USE_VERTEX_COLOR\n  in vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    s.lightmap = texture(cc_lightingMap, v_luv);\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_fogBase;\nuniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n        if (wPos.y < _FogTop) {\n            fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        } else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    } else {\n        if (wPos.y < _FogTop) {\n            float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        } else {\n            fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nfloat CC_TRANSFER_FOG(vec4 pos) {\n    #if CC_USE_FOG == 0\n        return LinearFog(pos);\n\t#elif CC_USE_FOG == 1\n        return ExpFog(pos);\n    #elif CC_USE_FOG == 2\n        return ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n        return LayeredFog(pos);\n    #endif\n    return 1.;\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if USE_VERTEX_COLOR\n  attribute vec3 a_color;\n  varying vec3 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying float v_fog_factor;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec2 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\n      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n#else\n      v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n#endif\n}\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_fog_factor = CC_TRANSFER_FOG(pos);\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\nuniform mediump vec4 cc_fogColor;\nuniform lowp vec4 cc_shadowColor;\nuniform lowp vec4 cc_shadowInfo;\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\n#if CC_RECEIVE_SHADOW\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n  float CCGetDirLightShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetDirLightShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    return shadow / 5.0;\n  }\n  float CCGetDirLightShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetDirLightShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\n#if CC_FORWARD_ADD\nuniform highp vec4 cc_lightPos[1];\nuniform vec4 cc_lightColor[1];\nuniform vec4 cc_lightSizeRangeAngle[1];\nuniform vec4 cc_lightDir[1];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5();\n      else shadowAttenuation = CCGetDirLightShadowFactorX1();\n      lightColor *= 1.0 - shadowAttenuation;\n    }\n    #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n#else\n  vec4 CCStandardShading (StandardSurface s) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L+V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.001);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      finalColor = s.lightmap.a * s.lightmap.rgb + (1.0 - s.lightmap.a) * finalColor;\n    #endif\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    finalColor *= (diffuseContrib + specularContrib);\n    float fAmb = 0.5 - N.y * 0.5;\n    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec3 skyColor = mix(cc_ambientGround.rgb, cc_ambientSky.rgb, s.lightmap.rgb);\n      skyColor = s.lightmap.a * skyColor + (1.0 - s.lightmap.a) * cc_ambientSky.rgb;\n      vec3 ambDiff = mix(skyColor, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    #else\n      vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    #endif\n    finalColor += (ambDiff.rgb * diffuse);\n    #if CC_USE_IBL\n      vec3 R = normalize(reflect(-V, N));\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      finalColor += env * cc_ambientSky.w * specular;\n    #endif\n    finalColor = finalColor * s.occlusion;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.albedo.a);\n  }\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec2 v_luv;\nuniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\nvarying float v_fog_factor;\n#if USE_VERTEX_COLOR\n  varying vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    s.lightmap = texture2D(cc_lightingMap, v_luv);\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCShadow","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":15,"count":1,"stageFlags":1,"format":32,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_color","type":15,"count":1,"stageFlags":1,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":14,"count":1,"stageFlags":1,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},{"hash":3020491,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 1) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nin vec2 v_uv;\nin vec2 v_uv1;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nuniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":2,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs:vert|standard-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs:vert|standard-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1}}]}]]],0,0,[],[],[]],[[{"name":"control","rect":{"x":0,"y":0,"width":200,"height":200},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"5afe076b-a0ae-43f1-a699-00f4791f7cb9@6c48a"}],[10],0,[0],[11],[21]],[[{"name":"control_b","rect":{"x":0,"y":0,"width":80,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"texture":"6a5ad823-8ff4-453f-a88a-1be19e0200de@6c48a"}],[10],0,[0],[11],[22]],[[[31,".bin",694296,2705502164,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":617904,"length":76392,"count":19098,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":617904,"count":11034,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-82.52242279052734,-63.307151794433594,-4958.263671875],"maxPosition",8,[1,4956.6884765625,7.684663772583008,68.612060546875]]]],0,0,[],[],[]],[[[31,".bin",325368,3931668868,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":291456,"length":33912,"count":8478,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":291456,"count":4048,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-102.79621887207031,-0.00004348754737293348,-324.2380676269531],"maxPosition",8,[1,102.79621887207031,186.87110900878906,324.2380676269531]]]],0,0,[],[],[]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4294967295],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[6,4],[23,10]],[[[31,".bin",1416,4094896171,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]]],0,0,[],[],[]],[[[31,".bin",236,3297164954,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]]],0,0,[],[],[]],[[[52,"Move",".bin",30,2,1.3,2813101855,[[0,15032,33,6,33],[0,15164,33,6,33],[0,15296,33,6,33],[0,15428,33,6,33],[0,15560,33,6,33],[0,15692,19,6,19],[0,15768,33,6,33],[0,15900,32,6,32],[0,16028,19,6,19],[0,16104,33,6,33],[0,16236,32,6,32],[0,16364,33,6,33],[0,16496,17,6,17],[0,16564,33,6,33],[0,16696,33,6,33],[0,16828,33,6,33],[0,16960,27,6,27],[0,17068,33,6,33],[0,17200,33,6,33],[0,17332,27,6,27],[0,17440,33,6,33],[0,17572,18,6,18],[0,17644,33,6,33],[0,17776,33,6,33],[0,17908,33,6,33]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[50,99,22,33]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,396,132,38,33]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,924,3,22,1]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,936,99,22,33]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,1332,132,38,33]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,1860,3,22,1]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,1872,99,22,33]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,2268,132,38,33]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,2796,3,22,1]]],[{},"modifiers",12,[[-10,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,2808,132,38,33]]],[{},"modifiers",12,[[-11,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3336,3,22,1]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3348,3,22,1]]],[{},"modifiers",12,[[-13,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,3360,132,38,33]]],[{},"modifiers",12,[[-14,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3888,3,22,1]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3900,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,3912,76,38,19]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4216,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4228,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,4240,132,38,33]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4768,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4780,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,4792,128,38,32]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5304,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5316,3,22,1]]],[{},"modifiers",12,[[-25,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,5328,76,38,19]]],[{},"modifiers",12,[[-26,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5632,3,22,1]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5644,3,22,1]]],[{},"modifiers",12,[[-28,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,5656,132,38,33]]],[{},"modifiers",12,[[-29,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6184,3,22,1]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6196,3,22,1]]],[{},"modifiers",12,[[-31,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,6208,128,38,32]]],[{},"modifiers",12,[[-32,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6720,3,22,1]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6732,3,22,1]]],[{},"modifiers",12,[[-34,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,6744,132,38,33]]],[{},"modifiers",12,[[-35,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7272,3,22,1]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7284,3,22,1]]],[{},"modifiers",12,[[-37,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,7296,68,38,17]]],[{},"modifiers",12,[[-38,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7568,3,22,1]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7580,3,22,1]]],[{},"modifiers",12,[[-40,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,7592,132,38,33]]],[{},"modifiers",12,[[-41,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8120,3,22,1]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8132,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,8144,132,38,33]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8672,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8684,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,8696,132,38,33]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9224,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9236,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,9248,108,38,27]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9680,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9692,3,22,1]]],[{},"modifiers",12,[[-52,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,9704,132,38,33]]],[{},"modifiers",12,[[-53,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10232,3,22,1]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10244,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,10256,132,38,33]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10784,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10796,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,10808,108,38,27]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11240,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11252,3,22,1]]],[{},"modifiers",12,[[-61,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,11264,132,38,33]]],[{},"modifiers",12,[[-62,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11792,3,22,1]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11804,3,22,1]]],[{},"modifiers",12,[[-64,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,11816,72,38,18]]],[{},"modifiers",12,[[-65,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12104,3,22,1]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12116,3,22,1]]],[{},"modifiers",12,[[-67,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,12128,132,38,33]]],[{},"modifiers",12,[[-68,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12656,3,22,1]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12668,3,22,1]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,12680,99,22,33]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,13076,132,38,33]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,13604,3,22,1]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,13616,99,22,33]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,14012,132,38,33]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14540,3,22,1]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14552,3,22,1]]],[{},"modifiers",12,[[-77,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14564,3,22,1]]],[{},"modifiers",12,[[-78,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14576,4,38,1]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14592,3,22,1]]],[{},"modifiers",12,[[-80,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14604,3,22,1]]],[{},"modifiers",12,[[-81,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14616,4,38,1]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14632,3,22,1]]],[{},"modifiers",12,[[-83,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14644,3,22,1]]],[{},"modifiers",12,[[-84,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14656,4,38,1]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14672,3,22,1]]],[{},"modifiers",12,[[-86,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14684,3,22,1]]],[{},"modifiers",12,[[-87,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14696,4,38,1]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14712,3,22,1]]],[{},"modifiers",12,[[-89,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14724,3,22,1]]],[{},"modifiers",12,[[-90,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14736,4,38,1]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14752,3,22,1]]],[{},"modifiers",12,[[-92,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14764,3,22,1]]],[{},"modifiers",12,[[-93,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14776,4,38,1]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14792,3,22,1]]],[{},"modifiers",12,[[-95,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14804,3,22,1]]],[{},"modifiers",12,[[-96,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14816,4,38,1]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14832,3,22,1]]],[{},"modifiers",12,[[-98,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14844,3,22,1]]],[{},"modifiers",12,[[-99,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14856,4,38,1]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14872,3,22,1]]],[{},"modifiers",12,[[-101,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14884,3,22,1]]],[{},"modifiers",12,[[-102,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14896,4,38,1]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14912,3,22,1]]],[{},"modifiers",12,[[-104,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14924,3,22,1]]],[{},"modifiers",12,[[-105,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14936,4,38,1]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14952,3,22,1]]],[{},"modifiers",12,[[-107,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14964,3,22,1]]],[{},"modifiers",12,[[-108,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14976,4,38,1]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,14992,3,22,1]]],[{},"modifiers",12,[[-110,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15004,3,22,1]]],[{},"modifiers",12,[[-111,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,15016,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[2,"Ctrl_Grp/Root/Hips"],[2,"Ctrl_Grp/Root/Hips/Spine"],[2,"Ctrl_Grp/Root/Hips/Spine/Head"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/LeftEar"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/RightEar"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK/LeftLowerArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK/LeftLowerArmFK/LeftWristFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK/LeftLowerArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK/LeftLowerArmIK/LeftWristIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK/RightLowerArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK/RightLowerArmFK/RightWristFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK/RightLowerArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK/RightLowerArmIK/RightWristIK"],[2,"Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot"],[2,"Ctrl_Grp/Root/Hips/RightLeg/RightFoot"],[2,"Zombunny"],[2,"Ctrl_Grp"],[2,"Ctrl_Grp/Root"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/HeadEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/LeftEar/LeftEarEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/RightEar/RightEarEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist/LeftWristEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist/RightWristEnd"],[2,"Ctrl_Grp/Root/Hips/LeftLeg"],[2,"Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot/LeftFootEnd"],[2,"Ctrl_Grp/Root/Hips/RightLeg"],[2,"Ctrl_Grp/Root/Hips/RightLeg/RightFoot/RightFootEnd"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,111],[],[],[]],[[[60,"Skin-0",4059322511,["Ctrl_Grp/Root","Ctrl_Grp/Root/Hips","Ctrl_Grp/Root/Hips/Spine","Ctrl_Grp/Root/Hips/Spine/Head","Ctrl_Grp/Root/Hips/Spine/Head/HeadEnd","Ctrl_Grp/Root/Hips/Spine/Head/LeftEar","Ctrl_Grp/Root/Hips/Spine/Head/LeftEar/LeftEarEnd","Ctrl_Grp/Root/Hips/Spine/Head/RightEar","Ctrl_Grp/Root/Hips/Spine/Head/RightEar/RightEarEnd","Ctrl_Grp/Root/Hips/Spine/LeftUpperArm","Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm","Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist","Ctrl_Grp/Root/Hips/Spine/RightUpperArm","Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm","Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist","Ctrl_Grp/Root/Hips/LeftLeg","Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot","Ctrl_Grp/Root/Hips/RightLeg","Ctrl_Grp/Root/Hips/RightLeg/RightFoot"],[[[7,2.832769343193999e-16,-1,0,0,1,2.832769343193999e-16,0,0,0,0,1,0,0,0,0,1],[7,1,-1.1102230246251565e-16,-6.715755566996388e-32,0,4.930380657631324e-32,-1.6081226229577292e-16,1,0,-1.1102230246251565e-16,-1,-1.6081226229577292e-16,0,-7.448849092403655e-31,2.4295615432684547e-15,-15.108060836791992,1],[7,1,-1.1102230246251565e-16,-6.715755566996388e-32,0,4.930380657631324e-32,-1.6081226229577292e-16,1,0,-1.1102230246251565e-16,-1,-1.6081226229577292e-16,0,-9.092818379034292e-31,5.538764535721868e-15,-34.44242477416992,1],[7,1,-1.1102230246251565e-16,-6.715755566996388e-32,0,4.930380657631324e-32,-1.6081226229577292e-16,1,0,-1.1102230246251565e-16,-1,-1.6081226229577292e-16,0,-7.67007137870198e-15,1.5719778477440364e-15,-57.471046447753906,1],[7,1,-1.1102230246251565e-16,-6.715755566996388e-32,0,4.930380657631324e-32,-1.6081226229577292e-16,1,0,-1.1102230246251565e-16,-1,-1.6081226229577292e-16,0,-1.9676668538341595e-14,-4.6375621374247604e-15,-93.5196533203125,1],[7,0.7310552597045898,-0.11375724524259567,0.6727685332298279,0,-0.6823182702064514,-0.12188276648521423,0.7208234071731567,0,8.470329472543003e-17,-0.9860039949417114,-0.16672168672084808,0,42.29185485839844,9.006275177001953,-94.92068481445312,1],[7,0.7310552597045898,-0.11375724524259567,0.6727685332298279,0,-0.6823182702064514,-0.12188276648521423,0.7208234071731567,0,8.470329472543003e-17,-0.9860039949417114,-0.16672168672084808,0,42.29185485839844,9.006275177001953,-116.29462432861328,1],[7,0.7310552597045898,-0.11375724524259567,0.6727685332298279,0,0.6823182702064514,0.12188276648521423,-0.7208234071731567,0,-2.0261155153264952e-16,0.9860039949417114,0.16672168672084808,0,-42.291873931884766,-9.006282806396484,94.92071533203125,1],[7,0.7310552597045898,-0.11375724524259567,0.6727685332298279,0,0.6823182702064514,0.12188276648521423,-0.7208234071731567,0,-2.0261155153264952e-16,0.9860039949417114,0.16672168672084808,0,-42.29179000854492,-9.006274223327637,116.29454040527344,1],[7,2.832769343193999e-16,-1.6081226229577292e-16,1,0,-1,-2.220446049250313e-16,2.832769343193999e-16,0,2.220446049250313e-16,-1,-1.6081226229577292e-16,0,53.6327018737793,-6.917708873748779,-17.286542892456055,1],[7,2.832769343193999e-16,-1.6081226229577292e-16,1,0,-1,-2.220446049250313e-16,2.832769343193999e-16,0,2.220446049250313e-16,-1,-1.6081226229577292e-16,0,53.6327018737793,-6.917708873748779,-42.40264892578125,1],[7,2.832769343193999e-16,-1.6081226229577292e-16,1,0,-1,-2.220446049250313e-16,2.832769343193999e-16,0,2.220446049250313e-16,-1,-1.6081226229577292e-16,0,53.6327018737793,-6.917708873748779,-66.20549011230469,1],[7,7.273661441694625e-16,1.6081226229577292e-16,1,0,1,2.220446049250313e-16,-7.273661441694625e-16,0,-2.220446049250313e-16,1,-1.6081226229577292e-16,0,-53.6327018737793,6.917709827423096,17.286500930786133,1],[7,7.273661441694625e-16,1.6081226229577292e-16,1,0,1,2.220446049250313e-16,-7.273661441694625e-16,0,-2.220446049250313e-16,1,-1.6081226229577292e-16,0,-53.6327018737793,6.917709827423096,42.4025993347168,1],[7,7.273661441694625e-16,1.6081226229577292e-16,1,0,1,2.220446049250313e-16,-7.273661441694625e-16,0,-2.220446049250313e-16,1,-1.6081226229577292e-16,0,-53.6327018737793,6.917709827423096,66.20549774169922,1],[7,0.9998040199279785,1.097656430584802e-16,0.019798098132014275,0,0.019798098132014275,2.855060603387772e-16,-0.9998040199279785,0,-1.1539660559526348e-16,1,2.832769343193999e-16,0,-15.784747123718262,-12.964345932006836,14.818209648132324,1],[7,1,-2.7669908397409508e-14,1.5376663429957776e-14,0,3.1655233989624776e-14,0.8757582902908325,-0.4827498197555542,0,-1.0859773682544922e-16,0.4827498197555542,0.8757582902908325,0,-15.729595184326172,-8.834541320800781,-9.933646202087402,1],[7,0.9998040199279785,-1.097673635941543e-16,0.019798098132014275,0,-0.019798098132014275,-1.586701821466158e-16,0.9998040199279785,0,-1.0660448301210264e-16,-1,-1.6081226229577292e-16,0,15.78476619720459,12.964300155639648,-14.818196296691895,1],[7,1,-2.862364208502943e-14,1.5651618794965995e-14,0,-3.2623209689219834e-14,-0.8757582902908325,0.4827498197555542,0,-1.1102230246251565e-16,-0.4827498197555542,-0.8757582902908325,0,15.729599952697754,8.834521293640137,9.93360424041748,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[31,".bin",111288,2369639907,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":75240,"length":21456,"count":5364,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":108216,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":75240,"count":1045,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":96696,"length":11520,"count":160,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,5,7,9,10,11,12,13,14,16,18]]},"minPosition",8,[1,-76.11719512939453,-0.3339390158653259,-35.7611083984375],"maxPosition",8,[1,76.11719512939453,148.1706085205078,37.818817138671875]]]],0,0,[],[],[]],[[[52,"Idle",".bin",30,2,8,2312704865,[[0,70016,12,6,12],[0,70064,195,6,195],[0,70844,140,6,140],[0,71404,195,6,195],[0,72184,195,6,195],[0,72964,195,6,195],[0,73744,195,6,195],[0,74524,192,6,192],[0,75292,195,6,195],[0,76072,195,6,195],[0,76852,192,6,192],[0,77620,195,6,195],[0,78400,83,6,83],[0,78732,195,6,195],[0,79512,186,6,186],[0,80256,193,6,193],[0,81028,194,6,194],[0,81804,186,6,186],[0,82548,193,6,193],[0,83320,194,6,194],[0,84096,195,6,195],[0,84876,100,6,100],[0,85276,195,6,195],[0,86056,12,6,12],[0,86104,12,6,12]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[50,36,22,12]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,144,48,38,12]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,336,3,22,1]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,348,585,22,195]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2688,780,38,195]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5808,3,22,1]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,5820,420,22,140]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,7500,560,38,140]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9740,3,22,1]]],[{},"modifiers",12,[[-10,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,9752,780,38,195]]],[{},"modifiers",12,[[-11,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12872,3,22,1]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,12884,3,22,1]]],[{},"modifiers",12,[[-13,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,12896,780,38,195]]],[{},"modifiers",12,[[-14,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,16016,3,22,1]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,16028,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,16040,780,38,195]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,19160,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,19172,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,19184,780,38,195]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22304,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22316,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,22328,768,38,192]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,25400,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,25412,3,22,1]]],[{},"modifiers",12,[[-25,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,25424,780,38,195]]],[{},"modifiers",12,[[-26,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,28544,3,22,1]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,28556,3,22,1]]],[{},"modifiers",12,[[-28,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,28568,780,38,195]]],[{},"modifiers",12,[[-29,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31688,3,22,1]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,31700,3,22,1]]],[{},"modifiers",12,[[-31,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,31712,768,38,192]]],[{},"modifiers",12,[[-32,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,34784,3,22,1]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,34796,3,22,1]]],[{},"modifiers",12,[[-34,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,34808,780,38,195]]],[{},"modifiers",12,[[-35,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,37928,3,22,1]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,37940,3,22,1]]],[{},"modifiers",12,[[-37,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,37952,332,38,83]]],[{},"modifiers",12,[[-38,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,39280,3,22,1]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,39292,3,22,1]]],[{},"modifiers",12,[[-40,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,39304,780,38,195]]],[{},"modifiers",12,[[-41,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,42424,3,22,1]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,42436,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,42448,744,38,186]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,45424,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,45436,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,45448,772,38,193]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,48536,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,48548,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,48560,776,38,194]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,51664,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,51676,3,22,1]]],[{},"modifiers",12,[[-52,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,51688,744,38,186]]],[{},"modifiers",12,[[-53,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,54664,3,22,1]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,54676,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,54688,772,38,193]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,57776,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,57788,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,57800,776,38,194]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,60904,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,60916,3,22,1]]],[{},"modifiers",12,[[-61,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,60928,780,38,195]]],[{},"modifiers",12,[[-62,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,64048,3,22,1]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,64060,3,22,1]]],[{},"modifiers",12,[[-64,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,64072,400,38,100]]],[{},"modifiers",12,[[-65,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,65672,3,22,1]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,65684,3,22,1]]],[{},"modifiers",12,[[-67,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,65696,780,38,195]]],[{},"modifiers",12,[[-68,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,68816,3,22,1]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,68828,3,22,1]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,68840,36,22,12]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,68984,48,38,12]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69176,3,22,1]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,69188,36,22,12]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,69332,48,38,12]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69524,3,22,1]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69536,3,22,1]]],[{},"modifiers",12,[[-77,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69548,3,22,1]]],[{},"modifiers",12,[[-78,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69560,4,38,1]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69576,3,22,1]]],[{},"modifiers",12,[[-80,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69588,3,22,1]]],[{},"modifiers",12,[[-81,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69600,4,38,1]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69616,3,22,1]]],[{},"modifiers",12,[[-83,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69628,3,22,1]]],[{},"modifiers",12,[[-84,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69640,4,38,1]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69656,3,22,1]]],[{},"modifiers",12,[[-86,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69668,3,22,1]]],[{},"modifiers",12,[[-87,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69680,4,38,1]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69696,3,22,1]]],[{},"modifiers",12,[[-89,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69708,3,22,1]]],[{},"modifiers",12,[[-90,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69720,4,38,1]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69736,3,22,1]]],[{},"modifiers",12,[[-92,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69748,3,22,1]]],[{},"modifiers",12,[[-93,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69760,4,38,1]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69776,3,22,1]]],[{},"modifiers",12,[[-95,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69788,3,22,1]]],[{},"modifiers",12,[[-96,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69800,4,38,1]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69816,3,22,1]]],[{},"modifiers",12,[[-98,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69828,3,22,1]]],[{},"modifiers",12,[[-99,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69840,4,38,1]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69856,3,22,1]]],[{},"modifiers",12,[[-101,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69868,3,22,1]]],[{},"modifiers",12,[[-102,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69880,4,38,1]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69896,3,22,1]]],[{},"modifiers",12,[[-104,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69908,3,22,1]]],[{},"modifiers",12,[[-105,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69920,4,38,1]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69936,3,22,1]]],[{},"modifiers",12,[[-107,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69948,3,22,1]]],[{},"modifiers",12,[[-108,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69960,4,38,1]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69976,3,22,1]]],[{},"modifiers",12,[[-110,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,69988,3,22,1]]],[{},"modifiers",12,[[-111,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,70000,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[2,"Ctrl_Grp/Root/Hips"],[2,"Ctrl_Grp/Root/Hips/Spine"],[2,"Ctrl_Grp/Root/Hips/Spine/Head"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/LeftEar"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/RightEar"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK/LeftLowerArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK/LeftLowerArmFK/LeftWristFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK/LeftLowerArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK/LeftLowerArmIK/LeftWristIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK/RightLowerArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK/RightLowerArmFK/RightWristFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK/RightLowerArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK/RightLowerArmIK/RightWristIK"],[2,"Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot"],[2,"Ctrl_Grp/Root/Hips/RightLeg/RightFoot"],[2,"Zombunny"],[2,"Ctrl_Grp"],[2,"Ctrl_Grp/Root"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/HeadEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/LeftEar/LeftEarEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/RightEar/RightEarEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist/LeftWristEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist/RightWristEnd"],[2,"Ctrl_Grp/Root/Hips/LeftLeg"],[2,"Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot/LeftFootEnd"],[2,"Ctrl_Grp/Root/Hips/RightLeg"],[2,"Ctrl_Grp/Root/Hips/RightLeg/RightFoot/RightFootEnd"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,111],[],[],[]],[[[52,"Death",".bin",30,0,3.068333015441894,347457331,[[0,11520,25,6,25],[0,11620,25,6,25],[0,11720,33,6,33],[0,11852,33,6,33],[0,11984,33,6,33],[0,12116,25,6,25],[0,12216,25,6,25],[0,12316,18,6,18],[0,12388,25,6,25],[0,12488,25,6,25],[0,12588,18,6,18],[0,12660,25,6,25],[0,12760,5,6,5],[0,12780,25,6,25],[0,12880,25,6,25],[0,12980,21,6,21],[0,13064,18,6,18],[0,13136,25,6,25],[0,13236,21,6,21],[0,13320,18,6,18],[0,13392,25,6,25],[0,13492,6,6,6],[0,13516,25,6,25],[0,13616,20,6,20],[0,13696,20,6,20]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[50,75,22,25]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,300,100,38,25]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,700,3,22,1]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,712,75,22,25]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,1012,100,38,25]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,1412,3,22,1]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,1424,99,22,33]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,1820,132,38,33]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,2348,3,22,1]]],[{},"modifiers",12,[[-10,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,2360,132,38,33]]],[{},"modifiers",12,[[-11,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,2888,3,22,1]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,2900,3,22,1]]],[{},"modifiers",12,[[-13,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,2912,132,38,33]]],[{},"modifiers",12,[[-14,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3440,3,22,1]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3452,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,3464,100,38,25]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3864,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,3876,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,3888,100,38,25]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4288,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4300,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,4312,72,38,18]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4600,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,4612,3,22,1]]],[{},"modifiers",12,[[-25,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,4624,100,38,25]]],[{},"modifiers",12,[[-26,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5024,3,22,1]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5036,3,22,1]]],[{},"modifiers",12,[[-28,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,5048,100,38,25]]],[{},"modifiers",12,[[-29,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5448,3,22,1]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5460,3,22,1]]],[{},"modifiers",12,[[-31,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,5472,72,38,18]]],[{},"modifiers",12,[[-32,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5760,3,22,1]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,5772,3,22,1]]],[{},"modifiers",12,[[-34,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,5784,100,38,25]]],[{},"modifiers",12,[[-35,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6184,3,22,1]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6196,3,22,1]]],[{},"modifiers",12,[[-37,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,6208,20,38,5]]],[{},"modifiers",12,[[-38,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6288,3,22,1]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6300,3,22,1]]],[{},"modifiers",12,[[-40,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,6312,100,38,25]]],[{},"modifiers",12,[[-41,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6712,3,22,1]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,6724,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,6736,100,38,25]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7136,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7148,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,7160,84,38,21]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7496,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7508,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,7520,72,38,18]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7808,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,7820,3,22,1]]],[{},"modifiers",12,[[-52,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,7832,100,38,25]]],[{},"modifiers",12,[[-53,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8232,3,22,1]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8244,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,8256,84,38,21]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8592,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8604,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,8616,72,38,18]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8904,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,8916,3,22,1]]],[{},"modifiers",12,[[-61,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,8928,100,38,25]]],[{},"modifiers",12,[[-62,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9328,3,22,1]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9340,3,22,1]]],[{},"modifiers",12,[[-64,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,9352,24,38,6]]],[{},"modifiers",12,[[-65,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9448,3,22,1]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9460,3,22,1]]],[{},"modifiers",12,[[-67,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,9472,100,38,25]]],[{},"modifiers",12,[[-68,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9872,3,22,1]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,9884,3,22,1]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,9896,60,22,20]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,10136,80,38,20]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,10456,3,22,1]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,10468,60,22,20]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,10708,80,38,20]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11028,3,22,1]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11040,3,22,1]]],[{},"modifiers",12,[[-77,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11052,3,22,1]]],[{},"modifiers",12,[[-78,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11064,4,38,1]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11080,3,22,1]]],[{},"modifiers",12,[[-80,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11092,3,22,1]]],[{},"modifiers",12,[[-81,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11104,4,38,1]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11120,3,22,1]]],[{},"modifiers",12,[[-83,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11132,3,22,1]]],[{},"modifiers",12,[[-84,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11144,4,38,1]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11160,3,22,1]]],[{},"modifiers",12,[[-86,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11172,3,22,1]]],[{},"modifiers",12,[[-87,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11184,4,38,1]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11200,3,22,1]]],[{},"modifiers",12,[[-89,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11212,3,22,1]]],[{},"modifiers",12,[[-90,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11224,4,38,1]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11240,3,22,1]]],[{},"modifiers",12,[[-92,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11252,3,22,1]]],[{},"modifiers",12,[[-93,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11264,4,38,1]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11280,3,22,1]]],[{},"modifiers",12,[[-95,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11292,3,22,1]]],[{},"modifiers",12,[[-96,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11304,4,38,1]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11320,3,22,1]]],[{},"modifiers",12,[[-98,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11332,3,22,1]]],[{},"modifiers",12,[[-99,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11344,4,38,1]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11360,3,22,1]]],[{},"modifiers",12,[[-101,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11372,3,22,1]]],[{},"modifiers",12,[[-102,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11384,4,38,1]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11400,3,22,1]]],[{},"modifiers",12,[[-104,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11412,3,22,1]]],[{},"modifiers",12,[[-105,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11424,4,38,1]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11440,3,22,1]]],[{},"modifiers",12,[[-107,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11452,3,22,1]]],[{},"modifiers",12,[[-108,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11464,4,38,1]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11480,3,22,1]]],[{},"modifiers",12,[[-110,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11492,3,22,1]]],[{},"modifiers",12,[[-111,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,11504,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[2,"Ctrl_Grp/Root/Hips"],[2,"Ctrl_Grp/Root/Hips/Spine"],[2,"Ctrl_Grp/Root/Hips/Spine/Head"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/LeftEar"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/RightEar"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK/LeftLowerArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmFK/LeftLowerArmFK/LeftWristFK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK/LeftLowerArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArmIK/LeftLowerArmIK/LeftWristIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK/RightLowerArmFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmFK/RightLowerArmFK/RightWristFK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK/RightLowerArmIK"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArmIK/RightLowerArmIK/RightWristIK"],[2,"Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot"],[2,"Ctrl_Grp/Root/Hips/RightLeg/RightFoot"],[2,"Zombunny"],[2,"Ctrl_Grp"],[2,"Ctrl_Grp/Root"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/HeadEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/LeftEar/LeftEarEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/Head/RightEar/RightEarEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/LeftUpperArm/LeftLowerArm/LeftWrist/LeftWristEnd"],[2,"Ctrl_Grp/Root/Hips/Spine/RightUpperArm/RightLowerArm/RightWrist/RightWristEnd"],[2,"Ctrl_Grp/Root/Hips/LeftLeg"],[2,"Ctrl_Grp/Root/Hips/LeftLeg/LeftFoot/LeftFootEnd"],[2,"Ctrl_Grp/Root/Hips/RightLeg"],[2,"Ctrl_Grp/Root/Hips/RightLeg/RightFoot/RightFootEnd"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,111],[],[],[]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4294967295],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[6,4],[24,10]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[6,4],[25,10]],[[[75,1,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,2533359615],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[6,4],[26,12]],[[[61,"builtin-toon",[{"hash":115038829,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\n#endif\nvarying vec2 v_uv;\nuniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 v_uv;\nuniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}],"blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]}]},{"hash":3631280495,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 1) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) out vec3 v_tangent;\n  layout(location = 5) out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  vec3 position;\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n};\n#if CC_FORWARD_ADD\nlayout(set = 2, binding = 1) uniform CCForwardLight {\n  highp vec4 cc_lightPos[1];\n  vec4 cc_lightColor[1];\n  vec4 cc_lightSizeRangeAngle[1];\n  vec4 cc_lightDir[1];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\nlayout(location = 0) in highp vec4 v_shadowPos;\nlayout(set = 0, binding = 1) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 2) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 4) uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 finalColor = lightColor * (diffuse + specular);\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) in vec3 v_tangent;\n  layout(location = 5) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\nout vec3 v_position;\nout vec2 v_uv;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  vec3 position;\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n};\n#if CC_FORWARD_ADD\nlayout(std140) uniform CCForwardLight {\n  highp vec4 cc_lightPos[1];\n  vec4 cc_lightColor[1];\n  vec4 cc_lightSizeRangeAngle[1];\n  vec4 cc_lightDir[1];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\nin highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 finalColor = lightColor * (diffuse + specular);\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin vec3 v_normal;\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nuniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n    v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  vec3 position;\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n};\n#if CC_FORWARD_ADD\nuniform highp vec4 cc_lightPos[1];\nuniform vec4 cc_lightColor[1];\nuniform vec4 cc_lightSizeRangeAngle[1];\nuniform vec4 cc_lightDir[1];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 1; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\nvarying highp vec4 v_shadowPos;\nuniform lowp vec4 cc_shadowColor;\nuniform lowp vec4 cc_shadowInfo;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetShadowFactorX1 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    float shadow = step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorX5 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n    return shadow / 5.0;\n  }\n  float CCGetShadowFactorX9 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -1; i <= 1; i++) {\n      for (int j = -1; j <= 1; j++) {\n        float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 9.0;\n  }\n  float CCGetShadowFactorX25 () {\n    vec3 clipPos = v_shadowPos.xyz / v_shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowInfo.x;\n    float offsety = 1.0 / cc_shadowInfo.y;\n    float shadow = 0.0;\n    for (int i = -2; i <= 2; i++) {\n      for (int j = -2; j <= 2; j++) {\n        float closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n        shadow += step(closestDepth, clipPos.z - cc_shadowInfo.w);\n      }\n    }\n    return shadow / 25.0;\n  }\n#endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 finalColor = lightColor * (diffuse + specular);\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25();\n      else if (3.0 > pcf && pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9();\n      else if (2.0 > pcf && pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5();\n      else shadowAttenuation = CCGetShadowFactorX1();\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n      finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n    }\n    #endif\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nuniform vec4 baseColor;\nuniform vec4 colorScaleAndCutoff;\nuniform vec4 shadeColor1;\nuniform vec4 shadeColor2;\nuniform vec4 specular;\nuniform vec4 shadeParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCShadow","defines":[]}],"samplers":[{"name":"cc_shadowMap","defines":["!CC_FORWARD_ADD","CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["!CC_FORWARD_ADD","CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["!CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":4,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":5,"defines":["USE_NORMAL_MAP"]}]},{"hash":3079830383,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int16: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n        return gl_VertexIndex;\n    }\nlayout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  layout(location = 4) in u16vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    layout(location = 7) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(set = 2, binding = 3) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(set = 2, binding = 3) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 1) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nlayout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n            ivec2 texSize = textureSize(tex, 0);\n            return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture(tex, x)),\n            decode32(texture(tex, y)),\n            decode32(texture(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  in vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(std140) uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  layout(std140) uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  layout(std140) uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowColor;\n  lowp  vec4 cc_shadowInfo;\n};\nout vec2 v_uv;\nout vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nin vec2 v_uv;\nin vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n            int pixelIndex = elementIndex;\n            vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n            vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n            return texture2D(tex, uv);\n        }\n#else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n            decode32(texture2D(tex, x)),\n            decode32(texture2D(tex, y)),\n            decode32(texture2D(tex, z)),\n            1.0\n        );\n    }\n#endif\nfloat getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n    } else {\n        return cc_displacementWeights[quot].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\n  attribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform highp sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  vec4 joints = vec4(a_joints);\n  return getJointMatrix(joints.x) * a_weights.x\n       + getJointMatrix(joints.y) * a_weights.y\n       + getJointMatrix(joints.z) * a_weights.z\n       + getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nuniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform vec4 baseColor;\nuniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvarying vec2 v_uv;\nvarying vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return packDepthToRGBA(v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":12,"count":1,"stageFlags":1,"format":42,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_clip_depth","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1}}]}]]],0,0,[],[],[]],[[[78],[79,"DebugNode",[[92,"Quad<ModelComponent>",0,-2,[5,"33pQcCAnlDpqDEoLPZzUpf"],[0],[10],1]],[93,"ecOVV0OANKg4Fk7u0Ie/zv",{"default":false,"serializable":false},-1,0],[1,0,1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]]],0,[0,3,1,0,1,1,0,14,1,2],[0,0],[-1,2],[27,28]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4294967295],"specular",8,[4,16777215],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[6,4],[29,10]],[[[31,".bin",171096,2498204744,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":126000,"length":45096,"count":11274,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":126000,"count":2250,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,215.87820434570312,0.40444010496139526,-346.4564514160156],"maxPosition",8,[1,908.7911376953125,556.1420288085938,346.45648193359375]]]],0,0,[],[],[]],[[[76,[{}]]],0,0,[0],[4],[12]],[[[61,"builtin-particle",[{"hash":66662317,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":2019975772,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":1657678029,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":1671779194,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{},{},{}],[[[{},"mainColor",8,[4,4278255584],"emissive",8,[4,4278255605],"emissiveScale",8,[1,12,12,12]],{},{}],11,0,0]]],0,0,[0],[4],[12]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4294967295],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[6,4],[30,10]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[6,4],[31,12]],[[[77,[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,4],[15,16]],[[[32,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,4],[3,16]],[[[94],[19,"Player","848APCzKdEyJz+/OUBA+Is",[-10,-11,-12],[[95,true,false,-2,[5,"f3CdPmJZpEzZ5G3iRviMd/"],[13,14,15],16],[15,-3,[5,"901+ZlUGdGq7+ZoXV+nMz3"],[1,-0.213,0.5,0],[1,0.71,1,0.722]],[96,0.999999,1,false,-4,[5,"aeJCHuNjlHYaUe0QPt4I+R"],[1,1,0,1],[1,1,0,1]],[97,-9,[5,"71r0Qtan5H4q39F2zi2x4D"],-8,-7,-6,-5]],[1,"848APCzKdEyJz+/OUBA+Is",{"default":false,"serializable":false},-1],[1,5.231,0,7.521]],[19,"Zombunny","b15GEhCHxCBL9Am/zN/zco",[-18],[[15,-14,[5,"caW+IWwhRJuYu20/pCeeWF"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-15,[5,"10U1udRXFD65t15ne8Fsa6"],[1,1,0,1],[1,1,0,1]],[39,-16,[5,"96OUqDY0pBZ7c2XjoRmGLR"]],[40,1.1,-17,[5,"83g4pXvutE2bgzqpUczuhy"]]],[1,"b15GEhCHxCBL9Am/zN/zco",{"default":false,"serializable":false},-13],[1,-18.616,0,6.255]],[19,"Zombunny-001","37usdmWvxDa5bUI2URYDI2",[-24],[[15,-20,[5,"d1Dt8IQv1HIbgNR6ze1ajH"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-21,[5,"95b0kVQIVBzZbzzaQONpz8"],[1,1,0,1],[1,1,0,1]],[39,-22,[5,"cd+ytJHgZIzYjRRwuVZF3K"]],[40,1.1,-23,[5,"4bFCMqLUdFlZxeBiBfIyON"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-19],[1,-10.582,0,-21.499]],[19,"Zombunny-002","b3EmwEjWNMKLb1Wgwwn7Au",[-30],[[15,-26,[5,"c3hM0l/qBDiax9ghzWl0pT"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-27,[5,"2f/EWmvOJAyYvbXaOzG70c"],[1,1,0,1],[1,1,0,1]],[39,-28,[5,"48YooezYlFZrZcweNEmskF"]],[40,1.1,-29,[5,"bfOGNWnqlG74KRMNO3fe/O"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-25],[1,14.27,0,-20.621]],[19,"Zombunny-003","75m6MKsWVL/aJsp3ZG/t+v",[-36],[[15,-32,[5,"af0smuXK5JmIaKjwb+hrzW"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-33,[5,"f0VYFGVrtDFLhHbKCXKkqy"],[1,1,0,1],[1,1,0,1]],[39,-34,[5,"17S28gwIxM9KjY5pcMwkMk"]],[40,1.1,-35,[5,"385WLtWEtHQaQ3wmnPd+8O"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-31],[1,-20.453,0,18.371]],[19,"Zombunny-004","378dj9Tb1NsYDmAH23yPXk",[-42],[[15,-38,[5,"c5M5PSRT5GR79zUca4MBiY"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-39,[5,"73oF+AodZO174YfhOetryH"],[1,1,0,1],[1,1,0,1]],[39,-40,[5,"f9xpElOTtAjLIjF2BKhj9s"]],[40,1.1,-41,[5,"95HjMJLPBOspJdwSmRWjH7"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-37],[1,18.201,0,19.883]],[19,"Zombunny-005","17IYqquEJL7qJiPTTqYmVS",[-48],[[15,-44,[5,"22c4l442pD/5eC2DFnXtrW"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-45,[5,"aeAFKHuABH0pf11tF3HdUk"],[1,1,0,1],[1,1,0,1]],[39,-46,[5,"dd7E1si2lEpqyisNXDJFlA"]],[40,1.1,-47,[5,"77T+h9/FFO0ZnQ8AovmNc6"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-43],[1,-0.293,0,21.992]],[19,"Zombunny-006","56X0x3iMlJnZqhumNsO5Dv",[-54],[[15,-50,[5,"c9uA0lr8JL+JFYoAVeF70t"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-51,[5,"e1xY8bIm5KbJkzCvLBsxyN"],[1,1,0,1],[1,1,0,1]],[39,-52,[5,"c0fktDQItGupXYHMHiIfCZ"]],[40,1.1,-53,[5,"53WNIucmhAZJZvvU5PbdJ6"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-49],[1,20.473,0,-1.167]],[19,"Zombunny-007","479NhPd4RBxL77IlUoJ0Sk",[-60],[[15,-56,[5,"3aB9EY9zhG3q4AjCiqzu1j"],[1,0,0.6,0],[1,0.8,1.2,0.7]],[37,4,0.999999,1,false,-57,[5,"6aPj7iuChB3pgMostaMZL/"],[1,1,0,1],[1,1,0,1]],[39,-58,[5,"a8gHk2LTxNU54C8s2LG50R"]],[40,1.1,-59,[5,"76QpMRaORO+IbxjVXbIWGD"]]],[1,"c0EaEU9zlHX48nQOWHEywo",{"default":false,"serializable":false},-55],[1,-22.088,0,-20.429]],[98,[-61,-62,-63,-64,1,-65,-66,2,3,4,5,6,7,8,9],[99,[100],[101,[4,4283190348]],[102],[103]]],[12,"Stool",[-68,-69,-70,-71,-72],[1,"97S8bEOyFCq59Y24m75anc",{"default":false,"serializable":false},-67],[1,-2.612,0,1.137],[3,0,-0.18126583853795,0,0.9834341339302464],[1,0,-20.887,0]],[80,"Environment","886Mk7OqVEKrJF/V1iKu2J",10,[-73,11,-74,-75,-76,-77,-78,-79,-80,-81]],[12,"Head",[-82,-83,-84,-85,-86,-87,-88],[1,"b2dUkldLVNp6V6qL9q+Vk+",{"default":false,"serializable":false},1],[1,1.7763568394002505e-15,2.0128822326660156,23.236967086791992],[3,-0.0007494663489449861,0.07510570339119203,0.48530071343171677,0.8711152559569675],[1,-7.9853646180804505,14.260782916243148,57.71408121156074]],[70,2,8,[[64,0.5,1],[104,1]]],[12,"Spine",[-89,-90,-91,-92,-93,-94,-95],[1,"aeiEoYjc5E4YdQ34lmVsqi",{"default":false,"serializable":false},2],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-96,-97,-98,-99,-100,-101,-102],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},3],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-103,-104,-105,-106,-107,-108,-109],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},4],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-110,-111,-112,-113,-114,-115,-116],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},5],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-117,-118,-119,-120,-121,-122,-123],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},6],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-124,-125,-126,-127,-128,-129,-130],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},7],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-131,-132,-133,-134,-135,-136,-137],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},8],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[12,"Spine",[-138,-139,-140,-141,-142,-143,-144],[1,"61+nKoVN9KHLxo65BKphBX",{"default":false,"serializable":false},9],[1,0.02581339329481125,-0.0059600998647511005,19.40102767944336],[3,0.09070304983923703,-0.11479451018842529,0.0038652895882367146,0.9892321450078639],[1,10.390486688847322,-13.169807778118521,-0.7550133183699175]],[65,"leftcontrol",[-151],[[55,-145,[5,200,200]],[59,-146,48],[106,12,0.08,0.08,false,false,-147],[71,-150,-149,-148,[[72,"5e739ILwstIoIHwHRjrdQWO","joysitckCallback",1]]]],[1,-303.2,-168.8,0]],[65,"rightcontrol",[-158],[[55,-152,[5,200,200]],[59,-153,50],[107,36,0.1,0.08,0.08,false,false,false,-154],[71,-157,-156,-155,[[72,"5e739ILwstIoIHwHRjrdQWO","joysitckAngleCallback",1]]]],[1,303.2,-168.8,0]],[62,"Hearse",12,[-162],[[38,2,2,-160,[5,"53YYHEW6ZOYYchfw7L27Op"]],[15,-161,[5,"24cWTCzJJOS5BKyFUuo7El"],[1,-0.204,1,0],[1,2.696,1,7.491]]],[1,"195uYEDiJNXrC2yVwjMXSG",{"default":false,"serializable":false},-159],[1,-8.813,0,-2.647],[3,0,-0.18223552549214747,0,0.9832549075639546],[1,0,-21,0]],[81,"Hearse-001",12,[-166],[[38,2,2,-164,[5,"11d19J2R9EfZTXeAQ3NAtG"]],[15,-165,[5,"9drhCqna5G6LCdZId/NXDf"],[1,0,1,0],[1,2.158,1,6.652]]],[1,"8dst670mhKsb4vS2XMkCVY",{"default":false,"serializable":false},-163],[1,4.102,0,-10.587]],[62,"Hearse-002",12,[-170],[[38,2,2,-168,[5,"fcpW+w2G1Awbz0z/JGuF39"]],[15,-169,[5,"58GBk0hodFiarvER+KF4kl"],[1,0,1,0],[1,2.158,1,6.652]]],[1,"5dd/YZZZxCSIgdqsM34g+n",{"default":false,"serializable":false},-167],[1,-4.483,1.648,11.865],[3,0.9426210982327701,-2.0443300969531108e-17,0.3338644413028235,5.771889553797624e-17],[1,180,-39.007,0]],[62,"Hearse-003",12,[-174],[[38,2,2,-172,[5,"79x5k1XHNNdIxcjYG7HeIA"]],[15,-173,[5,"14/icDgwxIqbXYzhhxvptt"],[1,0,1,0],[1,3.049,1,6.652]]],[1,"73DqQIOD1PSpmRrfWAiyEd",{"default":false,"serializable":false},-171],[1,12.227,1.648,9.814],[3,0.9366721892483976,-2.1444017424859178e-17,0.35020738125946743,5.73546299206697e-17],[1,180,-41,0]],[82,"Canvas","ddvvfmnAdMLqGJA0V5pxkw",10,[23,24],[[55,-175,[5,960,640]],[109,-176],[108,45,-177]],[1,480,320,0]],[33,"Zombunny",2,[-179,-180,-181],[[36,true,-178,[5,"f595ubTyJFILNRjD0d+Beh"],[58,59,60],61]],[1,"7f3/Cf9FJFI4TmHBuIXAjJ",{"default":false,"serializable":false},2],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",3,[-183,-184,-185],[[36,true,-182,[5,"fagW6lLrxLjbXJH7cW+14C"],[68,69,70],71]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},3],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",4,[-187,-188,-189],[[36,true,-186,[5,"d7AI4nmMFHJIUA4/Va1Wig"],[78,79,80],81]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},4],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",5,[-191,-192,-193],[[36,true,-190,[5,"44j6e63vlFqqC8JIDq+Cwu"],[88,89,90],91]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},5],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",6,[-195,-196,-197],[[36,true,-194,[5,"f79RItdtlPurih0Oe0sO8V"],[98,99,100],101]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},6],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",7,[-199,-200,-201],[[36,true,-198,[5,"f1OSNc7y9Af41bxZ3Ka0tL"],[108,109,110],111]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},7],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",8,[-203,-204,-205],[[36,true,-202,[5,"756QuBQkFFJ6vfaEOsTvtE"],[118,119,120],121]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},8],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[33,"Zombunny",9,[-207,-208,-209],[[36,true,-206,[5,"54Ptltcq9H7ImlbW+yY2JY"],[128,129,130],131]],[1,"b3vrhX709MGam5MDxGo+j7",{"default":false,"serializable":false},9],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[12,"Hips",[-210,-211,-212],[1,"1d4g3XOglDQrN8Zzeky1fT",{"default":false,"serializable":false},1],[1,-13.460859298706055,16.36138153076172,-4.540376663208008],[3,-0.6859510647741897,0,0,0.7276476734898255],[1,-86.62089795781343,0,0]],[4,"Spine",38,[13,-213,-214],[1,"94lT9Yy35KIY/X5hTFTeMo",{"default":false,"serializable":false},1],[1,2.742750883102417,6.53713321685791,14.960992813110352],[3,0.2038893434785522,-0.24216694033641536,-0.5273051347668418,0.7885008582573052],[1,10.389371732136839,-27.063793853138396,-68.48344297797776]],[4,"LeftShoulder",39,[-215,-216,-217],[1,"28Isrj5ltB14A0t7DfNZxM",{"default":false,"serializable":false},1],[1,8.366904258728027,2.905564785003662,20.852962493896484],[3,-0.1849147851362614,0.7125832534536404,-0.03260540633647443,0.6759944649278341],[1,-12.351403253750362,91.06443300899481,-17.915648685437922]],[4,"RightShoulder",39,[-218,-219,-220],[1,"9bWROZmJNIu4oFAZ4U4umG",{"default":false,"serializable":false},1],[1,-8.406879425048828,2.910036087036133,20.83737564086914],[3,0.6759944649278341,0.03260540633647443,0.7125832534536404,0.1849147851362614],[1,167.64859674624964,-91.06443300899481,17.915648685437922]],[12,"GunBarrelEnd",[-221,-222,-223],[1,"8edfIRIfZGX60jL6McD9aA",{"default":false,"serializable":false},1],[1,2.1316282072803006e-14,-2.7853275241795927e-12,63.14011001586914],[3,-0.00006129915063886888,0.00006129915063886888,-0.707106778529533,0.707106778529533],[1,0,0.009933952600056832,-90]],[63,"Floor",12,[-225],[1,"eaHJHK9edMDJBtxjW6QXPe",{"default":false,"serializable":false},-224]],[56,"Cube",1,11,[[57,"Cube<ModelComponent>",false,-226,[5,"70vCEgmlpFK6aBOp6bc5Ab"],[21],[10],22],[38,2,2,-227,[5,"b6RbSrnx9MGobrj/UMv/N+"]],[58,-228,[5,"01hV3T+BpAwoDzoJXA7yj2"]]],[1,"1fwUMZJE5MKL2Zo8JdO0cX",{"default":false,"serializable":false},11],[1,5.616,1.062,3.203],[1,1,2,1]],[56,"Cube-001",1,11,[[57,"Cube<ModelComponent>",false,-229,[5,"f6zA0tEMNOD62uX8nzb42v"],[23],[10],24],[38,2,2,-230,[5,"46J428vh5Nr4sYatYI8OnE"]],[58,-231,[5,"2fIqGOXmdAFqU84EXQm5vX"]]],[1,"f7MaMaudhNG53Ae7udrsyO",{"default":false,"serializable":false},11],[1,2.387,1.062,0.016],[1,0.8,2,0.8]],[56,"Cube-002",1,11,[[57,"Cube<ModelComponent>",false,-232,[5,"696mLfqNpMyamNJuR0MUAp"],[25],[10],26],[38,2,2,-233,[5,"50Tl4Hs+hBjojdBtXpP33z"]],[58,-234,[5,"c2hvrviRFIy4/VGX9j8yGu"]]],[1,"8fyJ6OjNZFS7Ulp5T21iwQ",{"default":false,"serializable":false},11],[1,5.639,1.062,-3.207],[1,0.8,2,0.8]],[56,"Cube-003",1,11,[[57,"Cube<ModelComponent>",false,-235,[5,"3fHc7FjitPwLHvwsAcSMDz"],[27],[10],28],[38,2,2,-236,[5,"baljzxispL1av7FDgACV97"]],[58,-237,[5,"fcoVLkzB9KJ6zAtCLb1lq2"]]],[1,"8fyJ6OjNZFS7Ulp5T21iwQ",{"default":false,"serializable":false},11],[1,8.85,1.062,0.03],[1,1,2,1]],[66,"wall",1,12,[[49,"Cube<ModelComponent>",-238,[5,"707skGmmJLn6w4N0mM5FG0"],[37],[10],38],[54,2,2,-239],[53,-240]],[1,0,0.438,-24.913],[1,50,1,1]],[66,"wall-001",1,12,[[49,"Cube<ModelComponent>",-241,[5,"707skGmmJLn6w4N0mM5FG0"],[39],[10],40],[54,2,2,-242],[53,-243]],[1,0,0.438,24.913],[1,50,1,1]],[67,"wall-002",1,12,[[49,"Cube<ModelComponent>",-244,[5,"707skGmmJLn6w4N0mM5FG0"],[41],[10],42],[54,2,2,-245],[53,-246]],[1,24.9,0.438,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,50,1,1],[1,0,90,0]],[67,"wall-003",1,12,[[49,"Cube<ModelComponent>",-247,[5,"707skGmmJLn6w4N0mM5FG0"],[43],[10],44],[54,2,2,-248],[53,-249]],[1,-24.9,0.438,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,50,1,1],[1,0,90,0]],[83,"Cube",false,2,"b6fq+RsYZE9pchVVL5HkMC",10,[[49,"Cube<ModelComponent>",-250,[5,"86eVcFkctBR6HSCmWh/ETz"],[45],[10],46],[53,-251],[54,4,2,-252]],[1,-0.1,0.5,5.09],[1,2,1,2]],[68,"control_b",23,[[55,-253,[5,80,80]],[59,-254,47]]],[68,"control_b",24,[[55,-255,[5,80,80]],[59,-256,49]]],[12,"Hips",[15,-257,-258],[1,"f8UIMKVLZCHKAm5YwbMUM+",{"default":false,"serializable":false},2],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",15,[[[8,"HeadEnd",-259,[1,"afoXegjAdFg7Vzu+PDs6eb",{"default":false,"serializable":false},2],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-260,-261],4,1,1],[1,"02z5tbJQNF+6Jqu15EoCYe",{"default":false,"serializable":false},2],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[16,-262,-263],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},3],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",16,[[[8,"HeadEnd",-264,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},3],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-265,-266],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},3],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[17,-267,-268],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},4],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",17,[[[8,"HeadEnd",-269,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},4],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-270,-271],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},4],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[18,-272,-273],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},5],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",18,[[[8,"HeadEnd",-274,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},5],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-275,-276],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},5],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[19,-277,-278],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},6],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",19,[[[8,"HeadEnd",-279,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},6],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-280,-281],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},6],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[20,-282,-283],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},7],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",20,[[[8,"HeadEnd",-284,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},7],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-285,-286],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},7],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[21,-287,-288],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},8],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",21,[[[8,"HeadEnd",-289,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},8],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-290,-291],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},8],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[12,"Hips",[22,-292,-293],[1,"3e3AFVXB9EJZ7eFezA0zh5",{"default":false,"serializable":false},9],[1,29.099836349487305,0.2726428508758545,0.0208236463367939],[3,-0.5340902806412458,0.482415646412541,-0.4754959345829046,0.5058916212155086],[1,-105.54243247772855,-13.528383902512052,-85.14077695603183]],[34,"Head",22,[[[8,"HeadEnd",-294,[1,"9fwsDgOSJP0Ixcj9HCsAgN",{"default":false,"serializable":false},9],[1,1.8207657603852567e-14,3.552713678800501e-15,36.048606872558594]],-295,-296],4,1,1],[1,"e5rdqVRjZHYYv2PLpTituQ",{"default":false,"serializable":false},9],[1,7.105427357601002e-15,1.7763568394002505e-15,23.02861976623535],[3,0.11890615836548189,0.05964769952893778,-0.034550626742369916,0.990509834194178],[1,13.88835699391734,7.271215841950877,-3.1104259817587065]],[84,"Main Camera","c9DMICJLFO5IeO07EPon7U",10,[[110,0,5,1822425087,-297],[111,false,-298,1,[1,16,16,16]]],[1,9.451,10.328,9.401],[3,-0.27781593346944056,0.36497167621709875,0.11507512748638375,0.8811195706053617],[1,-35,45,0]],[85,"Gun",1,[-300],[[17,-299,[5,"dd/HwCdwhLf7upBMsIn6eN"],[0],[10],1,1,2]],[1,"47H8jq1RVJEJ8991Ww5dW5",{"default":false,"serializable":false},1],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[86,"Spot Light",false,72,[[112,0.3,18800.708520300454,10,33,-301,[5,"657e+fMJNH0ZkxRNRuUFgP"],[4,4278583295],[73]]],[1,"6cr4w+hMRNx4tunX6JbBzo",{"default":false,"serializable":false},1],[1,-40.299999999999955,30.700000000000003,-7.400000000000017],[3,-1.1004123338683475e-15,1,-1.2924697440919607e-24,-2.8327694438690637e-16],[1,1.4810615869029202e-22,-179.99999999999997,-1.2609796490959434e-13]],[20,"PlayerCtrl",1,[-302,-303],[1,"f6PAIZG2lOOb6y55vabymb",{"default":false,"serializable":false},1],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[12,"LeftWrist",[-304,-305],[1,"75fvWM8MBAe5a0jJ3xQ3X5",{"default":false,"serializable":false},1],[1,-2.6290081223123707e-13,7.105427357601002e-15,6.863119125366211],[3,-0.03135791434297007,-0.02433805923102605,-0.20376461831124876,0.9782148641302673],[1,-4.453725987107874,-3.7731670640144426,-23.398556907149263]],[12,"RightWrist",[-306,-307],[1,"dabGmRqYtLaJQJXrVZ/KgX",{"default":false,"serializable":false},1],[1,0.00004307158087613061,-0.000004741850716527551,-6.863119125366211],[3,0.165319468401101,-0.20276024428612424,0.434100587199016,0.8620408557012121],[1,39.04485731782875,-42.35406725699953,42.95192393747467]],[21,"HipSway",38,[-308,-309],[1,"6a4OoL2GBCi5bo5o/6XxB6",{"default":false,"serializable":false},1],[3,0.6897527546367748,-0.15555392140031857,0.01681497313432603,0.7069380253504947],[1,87.20207067076093,-14.340334803263563,-11.000245635325014]],[113,0.1,false,false,25,[5,"efp2ixWaFBT5qi3PDF1hQu"],[3],[114,[4,4278249721]],[6,1],[3],[3],[6,500],[3],[3],[3],[3],[6,0.12],[3],[6,100],[3],[23,true,[22,1,[24,[[16,0.344,[4,33554431]],[16,0.618,[4,17415167]],[16,1,[4,16792319]]],[[18,70,0.629],[18,70,1]]]]],[116,true,0,1,0.01,100,0.08115781021773633,[6,1]],[25,true,[115,1,[70,2,8,[[64,0.01,0.14],[105,0.22,0.9,-2.48,-2.48],[64,0.99,0.03]]]],[3],[3],[3]],[117,true,[3],[3],[6,2],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[118,[3],[3],[3]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-310],[30,4]],[87,"BluteLine",false,42,[[49,"Cube<ModelComponent>",-311,[5,"f2UjqvcxNKy4Rvzn8lvB3s"],[5],[10],6]],[1,"6fUt1OvSVNLYz/rPxgSjMV",{"default":false,"serializable":false},1],[1,-0.047385025024823335,0.01912719397933671,503.642478863316],[1,2.0000000000000018,2.0000000000000013,1000.0000000000005]],[88,"GunPoint",false,42,[[49,"Cube<ModelComponent>",-312,[5,"35LawENVtI8atSsL9QB6sV"],[7],[10],8]],[1,"62siOF1CFBCL/JB5fS0B/g",{"default":false,"serializable":false},1],[1,4.052614974975484,4.919138528529608,-6.7575210278687905],[1,20.000000000000025,20.000000000000018,20.000000000000018],[1,0.0000012723783223409928,-3.568484294499537e-14,-1.2609796526912137e-13]],[89,"Main Light","c0y6F5f+pAvI805TdmxIjx",10,[[119,-313,[73]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[63,"Root",74,[38],[1,"8clH2TjQ9FEphWiTmLdejY",{"default":false,"serializable":false},1]],[4,"Hat1",13,[-314],[1,"4fs4uq7ZlPErb9GPMgvgOB",{"default":false,"serializable":false},1],[1,1.1234806776046753,2.9413909912109375,54.80265426635742],[3,-0.41955044779597545,-0.1509590890889078,-0.06617562459253833,0.8926419001399336],[1,-50.266343939478496,-18.968280786188867,0.4886034909002009]],[4,"Hat2",83,[-315],[1,"2awLFzq3ZK3LvQifFqS5mp",{"default":false,"serializable":false},1],[1,-6.639012813568115,-0.8961755633354187,33.84025192260742],[3,-0.32083470056529356,-0.03799828565057416,0.4044350439522752,0.8556012625190061],[1,-47.97951430449473,16.187740955946904,45.76237228863894]],[4,"Hat3",84,[-316],[1,"233rl0icNFO78vvUEXzkU8",{"default":false,"serializable":false},1],[1,1.4210854715202004e-14,1.4210854715202004e-14,20.78413963317871],[3,-0.3996689972322362,0.06576445046921285,-0.10537231862930929,0.9082050452252203],[1,-47.247343998423,2.081711211512838,-14.120816534672308]],[4,"Hat4",85,[-317],[1,"74kseKQItMZZJzEz+hbT6p",{"default":false,"serializable":false},1],[1,-3.552713678800501e-15,0,9.813515663146973],[3,-0.21112486502137515,-0.18299080242556953,-0.22251803943283718,0.9340376757520643],[1,-30.375859921694786,-27.588886178857315,-19.780193474716214]],[7,"Hat5",86,[[9,"HatEnd",-318,[1,"abylusg5BMur6cdd6SJtmm",{"default":false,"serializable":false},1],[1,2.842170943040401e-14,-1.4210854715202004e-14,8.921266555786133],[3,0.06063187230397651,-0.049213197959314545,0.0029930417028000947,0.9969417630478206],[1,6.96064069462828,-5.652128563025232,-7.136109059226887e-9]]],[1,"5cWf+pS3VHQJHH1YXBgyi4",{"default":false,"serializable":false},1],[1,-2.1316282072803006e-14,0,13.596016883850098],[3,-0.12402454192700278,-0.16294265022137241,0.19385707650526815,0.9594201580264317],[1,-11.062824370126071,-16.88318202223298,24.35559722125101]],[7,"LeftBrow3",13,[[9,"LeftBrow3End",-319,[1,"5dnOgiNOpFWIpV9kOTsOHB",{"default":false,"serializable":false},1],[1,-8.881784197001252e-15,-4.263256414560601e-14,18.445375442504883],[3,0.0705081207994466,0.058628770086493046,-0.03089156302276148,0.9953074819137483],[1,8.289865088500822,6.963404569906886,-3.051043914529317]]],[1,"6fdv+PScBFALNBz3RVu8Xh",{"default":false,"serializable":false},1],[1,11.806417465209961,-14.52564525604248,26.26665687561035],[3,0.6331746034218139,0.2850100719515198,0.265451612270406,0.6688756401685295],[1,85.29571797720472,3.7057695558135517,45.72771719421131]],[7,"LeftBrow2",13,[[9,"LeftBrow2End",-320,[1,"dcqEBJ5M5Pg5hi1QXPSfEx",{"default":false,"serializable":false},1],[1,-0.34312841296195984,0.19515125453472137,18.421300888061523],[3,-0.06347611365139486,0.046081716740652985,-0.07287697285791009,0.9942515804387825],[1,-6.943335565380609,4.7802476186900495,-8.671335478797163]]],[1,"9fiPa9M/lDtrAz2vrP7ZjA",{"default":false,"serializable":false},1],[1,11.806417465209961,-14.52564525604248,26.26665687561035],[3,0.7324283132959868,0.158197492575839,0.12913618999369866,0.6494968542333556],[1,96.65582663837671,1.0207668000253496,23.545908769246655]],[7,"LeftBrow1",13,[[9,"LeftBrow1End",-321,[1,"ae1Xa3BHdBKqNbK65trMww",{"default":false,"serializable":false},1],[1,0,2.842170943040401e-14,18.402048110961914],[3,0.047219963187120816,-0.004884495534933246,0.00023090601372958977,0.9988725461551082],[1,5.4130868291406244,-0.5603492648933884,-2.4626416057053713e-9]]],[1,"95DnpVcVpILqD7akJAsv4B",{"default":false,"serializable":false},1],[1,11.806417465209961,-14.52564525604248,26.26665687561035],[3,0.6265775577315428,0.006080314066869542,0.0012394755644675318,0.7793343683094879],[1,77.59574520006356,0.4540337995456242,0.5472694459504298]],[7,"RightBrow1",13,[[8,"RightBrow1End",-322,[1,"9387E/KT9GUp4fKdTs/a7h",{"default":false,"serializable":false},1],[1,0.00006798250251449645,-0.000013531808690459002,-18.402042388916016]]],[1,"30l3/Q/X9ED7v6nkpa8Lng",{"default":false,"serializable":false},1],[1,-11.499738693237305,-14.525650978088379,26.402353286743164],[3,-0.7793565960317673,0.004888376203358391,-0.0015416981130887966,0.6265596724708662],[1,-102.40426099098642,0.2133025626419156,-0.5472694297268191]],[7,"RightBrow2",13,[[9,"RightBrow2End",-323,[1,"3bLAutA65Gr6lOxQUWU5Fg",{"default":false,"serializable":false},1],[1,0.3431113064289093,-0.19519580900669098,-18.421239852905273],[3,-0.06490512869769116,0.04404618917766121,-0.041319895105745595,0.9960622087782027],[1,-7.247106899029835,4.743941211624907,-5.050400666401613]]],[1,"5evb7ZzXBIrIlOwcqJK1Ts",{"default":false,"serializable":false},1],[1,-11.499738693237305,-14.525650978088379,26.402353286743164],[3,-0.6504071168005656,0.13339933369760593,-0.15441241416766627,0.7316638617118678],[1,-83.34417355696068,-0.35343190928911505,-23.545907198757423]],[7,"RightBrow3",13,[[9,"RightBrow3End",-324,[1,"0fM7nirIdMsK3YAXUhMBs4",{"default":false,"serializable":false},1],[1,-0.8144594430923462,-0.000013523760571843013,-18.4273681640625],[3,0.06980873771121253,0.08059441444601945,-0.032441102557403165,0.9937700213651699],[1,8.289866007992375,9.494201039158028,-3.05104407995282]]],[1,"114qQ851JP6ZSWZNhXlwSh",{"default":false,"serializable":false},1],[1,-11.499738693237305,-14.525650978088379,26.402353286743164],[3,-0.6705240768502709,0.26913446835161187,-0.28110999544928,0.6316179785025858],[1,-94.70428285149727,-3.0384324914428285,-45.72771910371822]],[4,"LeftUpperArm",40,[-325],[1,"2cwyQI9rtAKp9RTRosVa0v",{"default":false,"serializable":false},1],[1,-0.2703551948070526,0.005978210363537073,15.292669296264648],[3,0.5847695662906015,0.5287651594200627,-0.17536783797324962,0.5896592930908199],[1,73.77915704326212,65.40533009900425,24.30519508995692]],[4,"LeftLowerArm",94,[-326],[1,"14RMa0+4hGBIGUCDqSAHVC",{"default":false,"serializable":false},1],[1,2.1316282072803006e-14,-7.105427357601002e-15,14.973132133483887],[3,0.000015243559547930344,0.0007248887547135619,-0.0002715396981283501,0.9999997002850151],[1,0.0017693387438984345,0.08306662329596201,-0.031114883325859547]],[4,"LeftLowerArm2",95,[75],[1,"b1d7c0FnRHxLRUHoaU5yat",{"default":false,"serializable":false},1],[1,-1.0658141036401503e-14,-7.105427357601002e-15,6.671474456787109],[3,-0.00001730152336185065,-0.0014192286265824385,-7.866522414351704e-18,0.9999989927448741],[1,-0.0019826065389651204,-0.1626316755060557,0.000002813774788074949]],[7,"LeftHand1",75,[[8,"LeftHand2",-327,[1,"e7kFq/2gtJvaTz+0nr4UwI",{"default":false,"serializable":false},1],[1,-1.7763568394002505e-15,1.4210854715202004e-14,9.398902893066406]]],[1,"01+H3uHMZO3JDevkzOfdEr",{"default":false,"serializable":false},1],[1,-5.329070518200751e-15,-7.105427357601002e-15,9.057891845703125],[3,0.11440253236432707,-0.029239924570074058,-0.0024044425181941526,0.9930011611553846],[1,13.125102749786201,-3.297713755092461,-0.6569375069761182]],[7,"LeftThumb1",75,[[9,"LeftThumb2",-328,[1,"20IrxX5mxIS4vfzDLBK3y7",{"default":false,"serializable":false},1],[1,7.105427357601002e-15,0,4.963469982147217],[3,0.50932188437438,0.08840567895543165,0.2521942634905354,0.8180303829860025],[1,65.82860212702803,-7.461305917577143,30.176076746618556]]],[1,"40FyNDxDNFcIgHB6TNaxlX",{"default":false,"serializable":false},1],[1,-7.5179948806762695,-1.6654400825500488,3.9639785289764404],[3,0.24162017386380724,-0.441443900882257,0.22370130358258447,0.8346883854057946],[1,37.49642725219147,-58.87958780642755,9.213760265401202]],[4,"LeftUpperArm_FK",40,[-329],[1,"1c8gsxzQtFjIVUDR25TOC1",{"default":false,"serializable":false},1],[1,-0.2703551948070526,0.005978210363537073,15.292669296264648],[3,0.355023059061515,0.5445110244670115,-0.00005533070405233789,0.7599120795901344],[1,35.810981673509225,63.811948244389384,22.739617618590884]],[4,"LeftLowerArm_FK",99,[-330],[1,"53JgHt8BREiZgNbQFdG7nh",{"default":false,"serializable":false},1],[1,2.1316282072803006e-14,-5.329070518200751e-15,14.973132133483887],[3,0.021096453482927262,0.005834590292008086,-0.0001485602144313958,0.9997604088662593],[1,2.4177130478065854,0.668808938212562,-0.0029146887919067545]],[7,"LeftLowerArm_2_FK",100,[[9,"LeftWrist_FK",-331,[1,"a7Q9G4aGtAv5tMMQjET+35",{"default":false,"serializable":false},1],[1,-2.6290081223123707e-13,3.552713678800501e-15,6.863119125366211],[3,-0.040302187791238724,-0.09564528008502564,0.7004948956452008,0.7060698373615146],[1,78.72714940903424,-89.76837110744373,85.49177628555289]]],[1,"4fc6V/xxNOSpvvygqyJE/o",{"default":false,"serializable":false},1],[1,-1.4210854715202004e-14,-1.2434497875801753e-14,6.671474456787109],[3,-0.00001730152336185065,-0.0014192286265824385,2.6223770041636853e-18,0.9999989927448741],[1,-0.0019826065389651187,-0.1626316755060557,0.000002813774789276887]],[4,"LeftUpperArm_IK",40,[-332],[1,"e5fQSP2TtFirlevy2l2v9n",{"default":false,"serializable":false},1],[1,-0.2703551948070526,0.005978210363537073,15.292669296264648],[3,0.5847695662906015,0.5287651594200627,-0.17536783797324962,0.5896592930908199],[1,73.77915704326212,65.40533009900425,24.30519508995692]],[4,"LeftLowerArm_IK",102,[-333],[1,"fepK/eHuFNcZAdhKFMvlby",{"default":false,"serializable":false},1],[1,2.4868995751603507e-14,0,14.973132133483887],[3,0.000015243559547930344,0.0007248887547135619,-0.0002715396981283501,0.9999997002850151],[1,0.0017693387438984345,0.08306662329596201,-0.031114883325859547]],[7,"LeftLowerArm2_IK",103,[[9,"LeftWrist_IK",-334,[1,"95mt5XM51FzICfl915D1ap",{"default":false,"serializable":false},1],[1,-2.6645352591003757e-13,0,6.863119125366211],[3,-0.03135791434297007,-0.02433805923102605,-0.20376461831124876,0.9782148641302673],[1,-4.453725987107874,-3.7731670640144426,-23.398556907149263]]],[1,"59un0ccvBCEZPdMobGKLFX",{"default":false,"serializable":false},1],[1,-3.552713678800501e-15,-1.4210854715202004e-14,6.671474456787109],[3,-0.00001730152336185065,-0.0014192286265824385,-7.73873872537415e-18,0.9999989927448741],[1,-0.0019826065389651204,-0.1626316755060557,0.0000028137747880895916]],[4,"RightUpperArm",41,[-335],[1,"e4n67pkohILJtY/srzzM2O",{"default":false,"serializable":false},1],[1,0.3109820783138275,-0.0007143501425161958,-15.320268630981445],[3,0.5861768686040975,0.03981229638109539,0.1863362181507001,0.7874582360834466],[1,75.00227743317666,-9.533619730034726,19.885286491024058]],[4,"RightLowerArm",105,[-336],[1,"30qE2u2KFMTaEjOdxkNpQ3",{"default":false,"serializable":false},1],[1,-0.000014474897398031317,-0.000006198447863425827,-14.973088264465332],[3,0.40645068420895125,0.09553392867696744,-0.03769634993646618,0.9078822032505577],[1,48.18082298104131,11.777941710408765,0.5278145178194341]],[4,"RightLowerArm2",106,[76],[1,"3dLnCUZWlFEaQ43UezrvTR",{"default":false,"serializable":false},1],[1,-0.00004521109440247528,0.0000028051606477674795,-6.671466827392578],[3,-0.000017301519723871818,-0.0014192286265824385,6.062087361557519e-15,0.9999989927448741],[1,-0.0019826061220828872,-0.1626316755060557,0.000002813774891989333]],[7,"RightHand1",76,[[8,"RightHand2",-337,[1,"fddJ+Oz/ZDR6/tWMCWjx9A",{"default":false,"serializable":false},1],[1,0.000002562610461609438,0.000021987831132719293,-9.398884773254395]]],[1,"8afh95I3ZG1KlljmoF+730",{"default":false,"serializable":false},1],[1,0.000005663828233082313,-0.00003267378997406922,-9.057907104492188],[3,0.11440253236432707,-0.029239924570074058,-0.0024044425181941526,0.9930011611553846],[1,13.125102749786201,-3.297713755092461,-0.6569375069761182]],[7,"RightThumb1",76,[[9,"RightThumb2",-338,[1,"d4FFg6ERFOGYytIT8/xXDz",{"default":false,"serializable":false},1],[1,0.0000033009773687808774,0.000017018337530316785,-4.96348237991333],[3,0.50932188437438,0.08840567895543165,0.2521942634905354,0.8180303829860025],[1,65.82860212702803,-7.461305917577143,30.176076746618556]]],[1,"6fkMTXT4dFgbAsANroGJyk",{"default":false,"serializable":false},1],[1,7.517994403839111,1.6654340028762817,-3.9640400409698486],[3,0.24162017386380724,-0.441443900882257,0.22370130358258447,0.8346883854057946],[1,37.49642725219147,-58.87958780642755,9.213760265401202]],[4,"RightUpperArm_FK",41,[-339],[1,"f9xmBhIMtFtqF/+PsFxzic",{"default":false,"serializable":false},1],[1,0.3109820783138275,-0.0007143501425161958,-15.320268630981445],[3,0.09155223753043663,-0.015432501606935498,0.00023990864315651816,0.9956806557030047],[1,10.505009392474179,-1.763596182522751,-0.13453149141837517]],[4,"RightLowerArm_FK",110,[-340],[1,"f8rzv9BPJDrKHxg+LQpUNU",{"default":false,"serializable":false},1],[1,-0.000014474897398031317,-0.000006198447863425827,-14.973088264465332],[3,0.021096453482927262,0.005834590292008086,-0.0001485602144313958,0.9997604088662593],[1,2.4177130478065854,0.668808938212562,-0.0029146887919067545]],[7,"RightLowerArm2_FK",111,[[9,"RightWrist_FK",-341,[1,"69gs9wNtdE04kXHKwZMVxF",{"default":false,"serializable":false},1],[1,0.00004307158087613061,-0.000004741850716527551,-6.863119125366211],[3,-0.040302187791238724,-0.09564528008502564,0.7004948956452008,0.7060698373615146],[1,78.72714940903424,-89.76837110744373,85.49177628555289]]],[1,"1d0B2kPz9ILpkrKn/PApqq",{"default":false,"serializable":false},1],[1,-0.00004521109440247528,0.0000028051606477674795,-6.671466827392578],[3,-0.000017301519723871818,-0.0014192286265824385,6.024394818694122e-15,0.9999989927448741],[1,-0.001982606122082893,-0.1626316755060557,0.0000028137748876700896]],[4,"RightUpperArm_IK",41,[-342],[1,"7fHjuS3SFDUK89E0fXG7+b",{"default":false,"serializable":false},1],[1,0.3109820783138275,-0.0007143501425161958,-15.320268630981445],[3,0.5861768686040975,0.03981229638109539,0.1863362181507001,0.7874582360834466],[1,75.00227743317666,-9.533619730034726,19.885286491024058]],[4,"RightLowerArm_IK",113,[-343],[1,"ebm+BRmHNFa4eajlDb1SvX",{"default":false,"serializable":false},1],[1,-0.000014474897398031317,-0.000006198447863425827,-14.973088264465332],[3,0.40645068420895125,0.09553392867696744,-0.03769634993646618,0.9078822032505577],[1,48.18082298104131,11.777941710408765,0.5278145178194341]],[7,"RightLowerArm2_IK",114,[[9,"RightWrist_IK",-344,[1,"cf8gm1pk9FvKUuicLBiQY8",{"default":false,"serializable":false},1],[1,0.00004307158087613061,-0.000004741850716527551,-6.863119125366211],[3,0.165319468401101,-0.20276024428612424,0.434100587199016,0.8620408557012121],[1,39.04485731782875,-42.35406725699953,42.95192393747467]]],[1,"3e8+Q/zVVLBpxkQLnAhuMa",{"default":false,"serializable":false},1],[1,-0.00004521109440247528,0.0000028051606477674795,-6.671466827392578],[3,-0.000017301519723871818,-0.0014192286265824385,6.1178348353168746e-15,0.9999989927448741],[1,-0.0019826061220828777,-0.1626316755060557,0.000002813774898377516]],[7,"LeftLeg",77,[[9,"LeftToe",-345,[1,"68MbhPe35IBKn+xbbtdEuk",{"default":false,"serializable":false},1],[1,-5.329070518200751e-15,-2.1316282072803006e-14,12.343774795532227],[3,0.08250371380546873,-0.6058343063003154,0.7883738292536663,0.06800467532333304],[1,104.87357546596604,-167.7315544422596,0.4159167037956618]]],[1,"4cKHQDPphMJqQBE/b5gPN5",{"default":false,"serializable":false},1],[1,16.592044830322266,3.806708574295044,15.226323127746582],[3,0.08394765080490968,-0.6048887947648015,0.7890259000851008,-0.06708551920660412],[1,105.36583017953562,-176.9931111009054,-11.971341564084955]],[7,"RightLeg",77,[[9,"RightToe",-346,[1,"9exq6COyFEKIgUMMuSi8PT",{"default":false,"serializable":false},1],[1,1.0658141036401503e-14,-7.105427357601002e-15,12.343774795532227],[3,-0.08250371380546873,-0.6058343063003154,0.7883738292536663,-0.06800467532333304],[1,104.87357546596604,167.7315544422596,-0.4159167037956618]]],[1,"97RJIQ36pCOozWIseorw0x",{"default":false,"serializable":false},1],[1,-16.864547729492188,-1.2364217042922974,14.716957092285156],[3,-0.0871520349389665,-0.6052074494503502,0.7886783561609761,0.06414761460116106],[1,105.36327423069308,176.4944778288961,11.927498817396456]],[4,"Tail1",38,[-347],[1,"27z8A2mdpIFJVBKeNA0vjH",{"default":false,"serializable":false},1],[1,0.09591574221849442,13.50897216796875,3.4315316677093506],[3,-0.8250781832901557,0.0007742992545203775,0.0025935428957167923,0.5650120931931712],[1,-111.19369449487763,0.29534588225813285,0.09471290915832299]],[7,"Tail2",118,[[9,"Tail3",-348,[1,"96/C7zOedI4q3Lv3sgzMHc",{"default":false,"serializable":false},1],[1,5.151434834260726e-13,1.5987211554602254e-14,17.295822143554688],[3,0.9986426703313019,0,0,-0.0520847097867164],[1,-174.028830044191,0,0]]],[1,"0b3aU6J21M7KuM1Wzj2Q95",{"default":false,"serializable":false},1],[1,-2.2032933235168457,10.826773643493652,7.460284233093262],[3,-0.00001892685436918673,0.00007908392754502554,-0.002279199709782469,0.9999973993147129],[1,-0.0021482195218282397,0.009057477863558839,-0.26117744486149697]],[63,"Ctrl_Grp",74,[-349],[1,"efFYW9XkJOWKizY12sIpz4",{"default":false,"serializable":false},1]],[4,"Gun",120,[-350],[1,"ecAh/aZQ5EJ5f8q8M/ORru",{"default":false,"serializable":false},1],[1,-40.25261688232422,26.91025733947754,-18.04804039001465],[3,0.44829785186927495,-0.44829785186927495,0.5468354743516495,0.5468354743516495],[1,89.99999999999999,-89.99999999999999,11.309932994015675]],[4,"GunBarrelStretch",121,[42],[1,"36RWbIIYdKEpi/1HGFiwBd",{"default":false,"serializable":false},1],[1,29.340702056884766,-0.0000019073459043283947,2.0117011070251465],[3,8.329586550988168e-16,0.6339218672012403,6.105549062560595e-16,0.7733970948252216],[1,2.946878905127807e-14,78.6801343257626,1.146181553455849e-13]],[91,"Particle",42,[78],[1,"9b5jmsZadPBoGYsXoxjxrw",{"default":false,"serializable":false},1],[3,2.1463770725947332e-15,1,6.080191396902631e-31,2.83276944882399e-16],[1,0,179.99999999999997,2.4595669500664583e-13]],[69,"Player",1,[[17,-351,[5,"39V34q+CRMlKIwrJQNBrhG"],[9,10],[10],1,11,12]],[1,"11OwKiUh1KUIBlsZrfh1ww",{"default":false,"serializable":false},1],[1,0,0.0002820895751938224,0],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[69,"Planks",43,[[51,-352,[5,"d0xrxEsPhKV5W6eNkz2fRM"],[17],[10],18]],[1,"dc+awEND1PoaNhG/NVjFJV",{"default":false,"serializable":false},43],[1,-25,0,25],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[14,"Stool",11,[[51,-353,[5,"3bbGLvgNREAZz7Zh+4gq/6"],[19],[10],20]],[1,"98S+oJHMlCKbFdmVeMwBdK",{"default":false,"serializable":false},11],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[14,"Hearse",25,[[51,-354,[5,"3fVUwJfEBBi5m0kEizRx3z"],[29],[10],30]],[1,"68ZFF/LSpEwK40e442VUYQ",{"default":false,"serializable":false},25],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[14,"Hearse",26,[[51,-355,[5,"5bET0jEMJEYrDBaVyDqZzj"],[31],[10],32]],[1,"e87bpSAJhJeqxDsJHKUsfC",{"default":false,"serializable":false},26],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[14,"Hearse",27,[[51,-356,[5,"0fCMAGA2pHhY6FE/i4RGVh"],[33],[10],34]],[1,"43jgYJSONBW6zmac9du6cU",{"default":false,"serializable":false},27],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[14,"Hearse",28,[[51,-357,[5,"4cw3XOBHRBzbgHO7DNsY2Z"],[35],[10],36]],[1,"c2/TJrzGpK3YtsDLmaIqdo",{"default":false,"serializable":false},28],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[90,"PathFinding","b5gVYy6etBs486YmEJ0i2s",10,[[120,"Environment<Pathfinding>",2,1,-358,[0,50,50],51]]],[35,"HitParticle",30,[-359],[1,"6bDIF1aUhIlLJWTtScZOj9",{"default":false,"serializable":false},2],[1,0,0.6,0]],[41,0.4,false,false,20,132,[5,"45YsrFcUdDj7NquuiY4hue"],[52],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-360],[30,53]],[14,"Zombunny",30,[[17,-361,[5,"f6+DLcXlpB0ZXtGzxt/rY+"],[54,55],[10],30,56,57]],[1,"b36Yz0ScNH/6WeK1R47U7J",{"default":false,"serializable":false},2],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",30,[-362],[1,"a8e2ZJ9JVBibgPT+QwG3zK",{"default":false,"serializable":false},2],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",135,[55],[1,"9f1EAzbqtD27QF/iT3i6eK",{"default":false,"serializable":false},2],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",56,[[8,"LeftEarEnd",-363,[1,"01uEJYUvNOlqkeKuuKG1/g",{"default":false,"serializable":false},2],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"d9c5ktBARLG4uKkXGsM1tR",{"default":false,"serializable":false},2],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",56,[[8,"RightEarEnd",-364,[1,"28oPEjGZVH/KF/K8FCnA++",{"default":false,"serializable":false},2],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c3fHNLcD1F0oLGCOtwqX0N",{"default":false,"serializable":false},2],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",15,[-365],[1,"05wNKkNQRI3oXmkM3YygFD",{"default":false,"serializable":false},2],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",139,[-366],[1,"16tnkBx3RMu65835iquHdN",{"default":false,"serializable":false},2],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",140,[[8,"LeftWristEnd",-367,[1,"49RNa/cm5PD6tacr2uoy0z",{"default":false,"serializable":false},2],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"d8Ntz34eJPMI1/Npi1yw6B",{"default":false,"serializable":false},2],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",15,[-368],[1,"29htA3XEZOA4kOCJyY6f95",{"default":false,"serializable":false},2],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",142,[[9,"LeftWristFK",-369,[1,"c22SJUP5JOH7dnzlULcF4R",{"default":false,"serializable":false},2],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"d6E2Rsz+hLXJWA+6pB4q8W",{"default":false,"serializable":false},2],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",15,[-370],[1,"d6YQRcLyNMz6HauncHeIqR",{"default":false,"serializable":false},2],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",144,[[9,"LeftWristIK",-371,[1,"c8dw/uF9BPpYUhurhzNRjh",{"default":false,"serializable":false},2],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"2e+fBF3iFOuJHAuFzVkDOR",{"default":false,"serializable":false},2],[1,0,0,25.116106033325195]],[4,"RightUpperArm",15,[-372],[1,"a4ROygnExLYpY2Rief1NxP",{"default":false,"serializable":false},2],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",146,[-373],[1,"9e1PnnsMlDaqZL2cYzeE+/",{"default":false,"serializable":false},2],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",147,[[8,"RightWristEnd",-374,[1,"50jLyTc0lEwo/JNZNQLIM1",{"default":false,"serializable":false},2],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"b4bftTvjVB3Yf7KXjCYQrS",{"default":false,"serializable":false},2],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",15,[-375],[1,"daqjAUOgFI6os/U37uKXSm",{"default":false,"serializable":false},2],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",149,[[8,"RightWristFK",-376,[1,"46rE2Ed4hFp6058DPEO1Mb",{"default":false,"serializable":false},2],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"52bX2M5hpDfoARhO3LNFG8",{"default":false,"serializable":false},2],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",15,[-377],[1,"edKfmoNixMoZN7zB9+m8Bm",{"default":false,"serializable":false},2],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",151,[[9,"RightWristIK",-378,[1,"19f7m1VSVBqqumcEiiZ6vs",{"default":false,"serializable":false},2],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"8caBzPiI1PULVotv5+U5FR",{"default":false,"serializable":false},2],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",55,[-379],[1,"67BTxDbzlP+L3c6g2SUjH/",{"default":false,"serializable":false},2],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",153,[[8,"LeftFootEnd",-380,[1,"239BIHJj5CDYaEhNEWnTkZ",{"default":false,"serializable":false},2],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"08vKFOv+xDwImRFaNF53xd",{"default":false,"serializable":false},2],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",55,[-381],[1,"c5/fpyhytHaLMG78XGGOHx",{"default":false,"serializable":false},2],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",155,[[8,"RightFootEnd",-382,[1,"63iAYgjLFJGLODC70iZo+d",{"default":false,"serializable":false},2],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"7dheBjYztC17WlnFvfqf9H",{"default":false,"serializable":false},2],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",31,[-383],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},3],[1,0,0.6,0]],[41,0.4,false,false,20,157,[5,"bfSAsvxjdFwpVEwdTAq40O"],[62],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-384],[30,63]],[14,"Zombunny",31,[[17,-385,[5,"37iCIG4IRPhoLgBtnI3gV6"],[64,65],[10],31,66,67]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},3],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",31,[-386],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},3],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",160,[57],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},3],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",58,[[8,"LeftEarEnd",-387,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},3],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},3],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",58,[[8,"RightEarEnd",-388,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},3],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},3],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",16,[-389],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},3],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",164,[-390],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},3],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",165,[[8,"LeftWristEnd",-391,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},3],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},3],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",16,[-392],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},3],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",167,[[9,"LeftWristFK",-393,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},3],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},3],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",16,[-394],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},3],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",169,[[9,"LeftWristIK",-395,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},3],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},3],[1,0,0,25.116106033325195]],[4,"RightUpperArm",16,[-396],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},3],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",171,[-397],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},3],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",172,[[8,"RightWristEnd",-398,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},3],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},3],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",16,[-399],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},3],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",174,[[8,"RightWristFK",-400,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},3],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},3],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",16,[-401],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},3],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",176,[[9,"RightWristIK",-402,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},3],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},3],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",57,[-403],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},3],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",178,[[8,"LeftFootEnd",-404,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},3],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},3],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",57,[-405],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},3],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",180,[[8,"RightFootEnd",-406,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},3],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},3],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",32,[-407],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},4],[1,0,0.6,0]],[41,0.4,false,false,20,182,[5,"07Gomk65hPbZc0yk9Yx1Pi"],[72],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-408],[30,73]],[14,"Zombunny",32,[[17,-409,[5,"670VS8EhdNk6oerYoymMDn"],[74,75],[10],32,76,77]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},4],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",32,[-410],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},4],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",185,[59],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},4],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",60,[[8,"LeftEarEnd",-411,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},4],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},4],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",60,[[8,"RightEarEnd",-412,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},4],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},4],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",17,[-413],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},4],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",189,[-414],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},4],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",190,[[8,"LeftWristEnd",-415,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},4],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},4],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",17,[-416],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},4],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",192,[[9,"LeftWristFK",-417,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},4],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},4],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",17,[-418],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},4],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",194,[[9,"LeftWristIK",-419,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},4],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},4],[1,0,0,25.116106033325195]],[4,"RightUpperArm",17,[-420],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},4],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",196,[-421],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},4],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",197,[[8,"RightWristEnd",-422,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},4],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},4],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",17,[-423],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},4],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",199,[[8,"RightWristFK",-424,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},4],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},4],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",17,[-425],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},4],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",201,[[9,"RightWristIK",-426,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},4],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},4],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",59,[-427],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},4],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",203,[[8,"LeftFootEnd",-428,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},4],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},4],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",59,[-429],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},4],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",205,[[8,"RightFootEnd",-430,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},4],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},4],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",33,[-431],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},5],[1,0,0.6,0]],[41,0.4,false,false,20,207,[5,"f0qvb/6aROR77rqU61qPcN"],[82],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-432],[30,83]],[14,"Zombunny",33,[[17,-433,[5,"92sBZXcMlHraduezP9KHJF"],[84,85],[10],33,86,87]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},5],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",33,[-434],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},5],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",210,[61],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},5],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",62,[[8,"LeftEarEnd",-435,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},5],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},5],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",62,[[8,"RightEarEnd",-436,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},5],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},5],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",18,[-437],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},5],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",214,[-438],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},5],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",215,[[8,"LeftWristEnd",-439,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},5],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},5],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",18,[-440],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},5],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",217,[[9,"LeftWristFK",-441,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},5],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},5],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",18,[-442],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},5],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",219,[[9,"LeftWristIK",-443,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},5],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},5],[1,0,0,25.116106033325195]],[4,"RightUpperArm",18,[-444],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},5],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",221,[-445],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},5],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",222,[[8,"RightWristEnd",-446,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},5],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},5],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",18,[-447],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},5],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",224,[[8,"RightWristFK",-448,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},5],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},5],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",18,[-449],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},5],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",226,[[9,"RightWristIK",-450,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},5],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},5],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",61,[-451],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},5],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",228,[[8,"LeftFootEnd",-452,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},5],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},5],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",61,[-453],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},5],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",230,[[8,"RightFootEnd",-454,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},5],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},5],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",34,[-455],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},6],[1,0,0.6,0]],[41,0.4,false,false,20,232,[5,"aaVnlrrqdBF6sQV70+1SWb"],[92],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-456],[30,93]],[14,"Zombunny",34,[[17,-457,[5,"649ED3Mh5MkYYJjRbNSHd6"],[94,95],[10],34,96,97]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},6],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",34,[-458],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},6],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",235,[63],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},6],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",64,[[8,"LeftEarEnd",-459,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},6],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},6],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",64,[[8,"RightEarEnd",-460,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},6],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},6],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",19,[-461],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},6],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",239,[-462],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},6],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",240,[[8,"LeftWristEnd",-463,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},6],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},6],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",19,[-464],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},6],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",242,[[9,"LeftWristFK",-465,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},6],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},6],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",19,[-466],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},6],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",244,[[9,"LeftWristIK",-467,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},6],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},6],[1,0,0,25.116106033325195]],[4,"RightUpperArm",19,[-468],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},6],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",246,[-469],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},6],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",247,[[8,"RightWristEnd",-470,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},6],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},6],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",19,[-471],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},6],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",249,[[8,"RightWristFK",-472,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},6],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},6],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",19,[-473],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},6],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",251,[[9,"RightWristIK",-474,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},6],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},6],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",63,[-475],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},6],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",253,[[8,"LeftFootEnd",-476,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},6],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},6],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",63,[-477],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},6],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",255,[[8,"RightFootEnd",-478,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},6],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},6],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",35,[-479],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},7],[1,0,0.6,0]],[41,0.4,false,false,20,257,[5,"36ycHOJgJOZ7x666bTfYCu"],[102],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-480],[30,103]],[14,"Zombunny",35,[[17,-481,[5,"21ispCewNDfre2n345zNWt"],[104,105],[10],35,106,107]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},7],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",35,[-482],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},7],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",260,[65],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},7],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",66,[[8,"LeftEarEnd",-483,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},7],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},7],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",66,[[8,"RightEarEnd",-484,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},7],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},7],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",20,[-485],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},7],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",264,[-486],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},7],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",265,[[8,"LeftWristEnd",-487,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},7],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},7],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",20,[-488],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},7],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",267,[[9,"LeftWristFK",-489,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},7],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},7],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",20,[-490],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},7],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",269,[[9,"LeftWristIK",-491,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},7],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},7],[1,0,0,25.116106033325195]],[4,"RightUpperArm",20,[-492],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},7],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",271,[-493],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},7],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",272,[[8,"RightWristEnd",-494,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},7],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},7],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",20,[-495],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},7],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",274,[[8,"RightWristFK",-496,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},7],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},7],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",20,[-497],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},7],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",276,[[9,"RightWristIK",-498,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},7],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},7],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",65,[-499],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},7],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",278,[[8,"LeftFootEnd",-500,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},7],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},7],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",65,[-501],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},7],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",280,[[8,"RightFootEnd",-502,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},7],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},7],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",36,[-503],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},8],[1,0,0.6,0]],[41,0.4,false,false,20,282,[5,"b90Kt+bM5G671PbGP+WKop"],[112],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-504],[30,113]],[14,"Zombunny",36,[[17,-505,[5,"0850s9JNVJx50/ASbuKYU4"],[114,115],[10],36,116,117]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},8],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",36,[-506],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},8],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",285,[67],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},8],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",68,[[8,"LeftEarEnd",-507,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},8],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},8],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",68,[[8,"RightEarEnd",-508,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},8],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},8],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",21,[-509],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},8],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",289,[-510],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},8],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",290,[[8,"LeftWristEnd",-511,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},8],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},8],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",21,[-512],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},8],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",292,[[9,"LeftWristFK",-513,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},8],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},8],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",21,[-514],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},8],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",294,[[9,"LeftWristIK",-515,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},8],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},8],[1,0,0,25.116106033325195]],[4,"RightUpperArm",21,[-516],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},8],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",296,[-517],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},8],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",297,[[8,"RightWristEnd",-518,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},8],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},8],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",21,[-519],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},8],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",299,[[8,"RightWristFK",-520,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},8],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},8],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",21,[-521],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},8],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",301,[[9,"RightWristIK",-522,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},8],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},8],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",67,[-523],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},8],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",303,[[8,"LeftFootEnd",-524,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},8],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},8],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",67,[-525],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},8],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",305,[[8,"RightFootEnd",-526,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},8],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},8],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[35,"HitParticle",37,[-527],[1,"c9enlr9vFMooynomFTGwA/",{"default":false,"serializable":false},9],[1,0,0.6,0]],[41,0.4,false,false,20,307,[5,"bbwa/O7m9G7ryacArJIQ/4"],[122],[11],[6,1],[3],[3],[6,5],[6,0.005585053606381855],[3],[6,0.39950586578150205],[3],[6,0.3],[3],[3],[3],[[48,0.01,[6,5]]],[23,true,[22,1,[24,[[43,[4,33554431]],[16,1,[4,33554431]]],[[44,111],[18,0,1]]]]],[45,true,0,0.1,0.46509533907144895,[6,1]],[25,true,[42,1,14],[3],[3],[3]],[46,[3],[3],[3],[6,1]],[26,[3],[3],[3]],[27,[3],[3],[3],[3]],[47,true,[3],[3],[6,0.7853981633974483]],[28,[3],[3]],[29,[6,1],[3],[11],[11],-528],[30,123]],[14,"Zombunny",37,[[17,-529,[5,"6ejrdIfDdPJ4V4zHTy4lFX"],[124,125],[10],37,126,127]],[1,"e74OsyXk1NfKKnjATAO3zN",{"default":false,"serializable":false},9],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[20,"Ctrl_Grp",37,[-530],[1,"607o2QMHJJF4UF3f7jS+he",{"default":false,"serializable":false},9],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[21,"Root",310,[69],[1,"e3j5JW2A9IIK/IfMQZlLnI",{"default":false,"serializable":false},9],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0,0,90]],[7,"LeftEar",70,[[8,"LeftEarEnd",-531,[1,"95i+D+3z9KaYVhlniXFj9Q",{"default":false,"serializable":false},9],[1,1.4210854715202004e-14,2.4868995751603507e-14,21.37394142150879]]],[1,"7aQnXIQcpBiZrsXTwAHE/u",{"default":false,"serializable":false},9],[1,33.96649169921875,6.945112705230713,40.90422058105469],[3,-0.12813388033627254,0.46012217605194283,0.03681415383352955,0.8777892741955302],[1,-15.022321046710337,54.92270412705742,-3.054414374282431]],[7,"RightEar",70,[[8,"RightEarEnd",-532,[1,"eaAvEYYz1LqZ5iJaelbcQi",{"default":false,"serializable":false},9],[1,-0.00008285293006338179,-0.000009097042493522167,-21.373830795288086]]],[1,"c2fd8bSGhP5qFsOW19OUNW",{"default":false,"serializable":false},9],[1,-33.96649932861328,6.945109844207764,40.90425491333008],[3,0.9452946070720264,-0.03366024006063882,0.2971512937049986,0.13033112724536994],[1,164.54791459504784,-34.793434388984295,0.7917634526542552]],[4,"LeftUpperArm",22,[-533],[1,"d3sds2xvpEVrYSQATaDA3M",{"default":false,"serializable":false},9],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[4,"LeftLowerArm",314,[-534],[1,"a0UlKwJ5lFEZCvIafB8p3z",{"default":false,"serializable":false},9],[1,0,0,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[7,"LeftWrist",315,[[8,"LeftWristEnd",-535,[1,"eeSv3C6EhCfIb+PJOLr7MP",{"default":false,"serializable":false},9],[1,0,3.552713678800501e-15,10.998556137084961]]],[1,"609Oqy5GNPLaAyUu/LXJDb",{"default":false,"serializable":false},9],[1,4.263256414560601e-14,0,23.802845001220703],[3,-8.309530402885837e-17,-0.014149601927510948,1.2703294228220027e-17,0.9998998893715775],[1,-9.500469742831662e-15,-1.6214790539299264,1.5902773590310208e-15]],[4,"LeftUpperArmFK",22,[-536],[1,"cc9sBMxkRL3aPkBQwOsGmO",{"default":false,"serializable":false},9],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.37590306891422776,0.6522644739852882,-0.356424777695973,0.5533618315369581],[1,62.25984685458887,96.05374671455155,5.503853529699408]],[7,"LeftLowerArmFK",317,[[9,"LeftWristFK",-537,[1,"0eKJ2x8kJJ5ZpJselP0kbt",{"default":false,"serializable":false},9],[1,4.263256414560601e-14,-7.105427357601002e-15,23.802845001220703],[3,-2.7567470475325726e-17,-0.014149601927510948,1.3489069507814817e-17,0.9998998893715775],[1,-3.1368116569804967e-15,-1.6214790539299264,1.590277344644988e-15]]],[1,"adFV+aVdpEaqvSjJZ06t0k",{"default":false,"serializable":false},9],[1,0,-3.552713678800501e-15,25.116106033325195],[3,0.011576068883410097,-0.02962385566235967,-0.008396320259549605,0.9994588153650961],[1,1.2976082958491142,-3.384152248974699,-1.0009742770663437]],[4,"LeftUpperArmIK",22,[-538],[1,"54L5SaGadK95MRvydsBj3W",{"default":false,"serializable":false},9],[1,17.286542892456055,6.917708873748779,19.190275192260742],[3,0.8927685728954337,-0.0034948236276103363,0.45036462507046215,0.011125014301317546],[1,178.68138277581204,-53.535598384237986,0.21660654488352857]],[13,"LeftLowerArmIK",319,[[9,"LeftWristIK",-539,[1,"fbRBZm2FNHi6WeHU90/0vi",{"default":false,"serializable":false},9],[1,4.263256414560601e-14,0,23.802845001220703],[3,0.1606024399922959,0.010572996288257164,0.984830705242777,0.06483479026744762],[1,179.99999836762115,-161.4759053372714,7.533085574392721]]],[1,"d8dmLT/LVDNr0gmIlYSJbs",{"default":false,"serializable":false},9],[1,0,0,25.116106033325195]],[4,"RightUpperArm",22,[-540],[1,"72KPjjm3RKQZyGuRLVObrf",{"default":false,"serializable":false},9],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[4,"RightLowerArm",321,[-541],[1,"64EX0+IB1PJqJtHXmhc52n",{"default":false,"serializable":false},9],[1,-1.4210854715202004e-14,-1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[13,"RightWrist",322,[[8,"RightWristEnd",-542,[1,"44czn5eZZCD7hFv9ApHh/l",{"default":false,"serializable":false},9],[1,-1.4210854715202004e-14,0,-10.998499870300293]]],[1,"a8u2saF7lJCKgYEdxlnCqy",{"default":false,"serializable":false},9],[1,-1.4210854715202004e-14,-7.993605777301127e-15,-23.802900314331055]],[4,"RightUpperArmFK",22,[-543],[1,"bbWXdXbetOV5ro3Zs3qjl/",{"default":false,"serializable":false},9],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.5234715895703781,0.4341411555026637,0.6424335188712248,-0.3532394737882634],[1,-111.93081513841487,-101.67726841727705,0.03754966485190102]],[7,"RightLowerArmFK",324,[[8,"RightWristFK",-544,[1,"beJ5Jhmg1KZbcJx74gdfXi",{"default":false,"serializable":false},9],[1,-1.4210854715202004e-14,-3.552713678800501e-15,-23.802900314331055]]],[1,"85xvGWr0lDg6UjffDma4Xh",{"default":false,"serializable":false},9],[1,-1.4210854715202004e-14,1.7763568394002505e-15,-25.116100311279297],[3,-0.019711928071239473,0.033583070450962996,0.006860697978545581,0.9992179682602024],[1,-2.284236620486615,3.864048595696562,0.7097232804619513]],[4,"RightUpperArmIK",22,[-545],[1,"9era/9DPlNhZMl0xXrz/Vg",{"default":false,"serializable":false},9],[1,-17.286500930786133,6.917709827423096,19.19027328491211],[3,0.028749444248060755,0.5589623579052037,-0.002436212086880112,0.828690905447351],[1,2.888484296448398,67.95970946651828,1.610336889860574]],[7,"RightLowerArmIK",326,[[9,"RightWristIK",-546,[1,"a0KtfMlqZM3IPu75vwGpq2",{"default":false,"serializable":false},9],[1,-2.4868995751603507e-14,-3.552713678800501e-15,-23.802900314331055],[3,-0.1572880409976787,-0.015486222328189522,0.9826798208274921,0.0967523581912224],[1,179.99999891332283,161.81270733503064,11.24617089201557]]],[1,"f5dXvKfgdFA4C0myVJtdW5",{"default":false,"serializable":false},9],[1,-1.4210854715202004e-14,0,-25.116100311279297],[3,-4.4589683774303824e-14,0.4854694813847049,2.4712849856666215e-14,0.8742536146016588],[1,-5.841880729247013e-12,58.08647225852005,-4.7707150582814275e-15]],[4,"LeftLeg",69,[-547],[1,"e075XalytKKbQJ5RfNFisC",{"default":false,"serializable":false},9],[1,15.48828125,-12.964345932006836,0.01975155808031559],[3,0.9999509984105355,-6.061716490741267e-19,0.00989953422001094,6.122933790688779e-17],[1,180,-1.1344215894514547,-2.2714321653477064e-24]],[7,"LeftFoot",328,[[8,"LeftFootEnd",-548,[1,"05OAIzMd5FUJCmGrTUMYfT",{"default":false,"serializable":false},9],[1,-7.105427357601002e-15,0,5.998485565185547]]],[1,"d46MiFxIxNT49aYfGxLXs1",{"default":false,"serializable":false},9],[1,4.864466667175293,7.756918907165527,12.021666526794434],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]],[4,"RightLeg",69,[-549],[1,"63NrBLSLlKfrD8vLVyWYZv",{"default":false,"serializable":false},9],[1,-15.488300323486328,-12.964300155639648,0.019738737493753433],[3,-3.48713329130424e-18,0.00989953422001094,1.769331253612296e-18,0.9999509984105355],[1,-4.0158359432955264e-16,1.1344215894514547,1.9878467701602584e-16]],[7,"RightFoot",330,[[8,"RightFootEnd",-550,[1,"27s0ytFB9Br5mOZS+nIe2a",{"default":false,"serializable":false},9],[1,9.414691248821327e-14,-0.000034134402085328475,-5.998554229736328]]],[1,"f0+MNjrkxCupQaLWKwXPNO",{"default":false,"serializable":false},9],[1,-0.9827580451965332,9.173906326293945,-24.03310775756836],[3,-0.5085270477820406,-0.008523808914602256,-0.005034427696470642,0.8609891061409769],[1,-61.13485016875359,-1.1344216060657937,-2.1903843980302946e-9]]],0,[0,3,1,0,1,1,0,1,1,0,1,1,0,15,73,0,16,79,0,17,78,0,18,80,0,1,1,0,-1,72,0,-2,74,0,-3,124,0,3,2,0,1,2,0,1,2,0,1,2,0,1,2,0,-1,30,0,3,3,0,1,3,0,1,3,0,1,3,0,1,3,0,-1,31,0,3,4,0,1,4,0,1,4,0,1,4,0,1,4,0,-1,32,0,3,5,0,1,5,0,1,5,0,1,5,0,1,5,0,-1,33,0,3,6,0,1,6,0,1,6,0,1,6,0,1,6,0,-1,34,0,3,7,0,1,7,0,1,7,0,1,7,0,1,7,0,-1,35,0,3,8,0,1,8,0,1,8,0,1,8,0,1,8,0,-1,36,0,3,9,0,1,9,0,1,9,0,1,9,0,1,9,0,-1,37,0,-1,81,0,-2,71,0,-3,12,0,-4,52,0,-6,29,0,-7,131,0,3,11,0,-1,126,0,-2,44,0,-3,45,0,-4,46,0,-5,47,0,-1,43,0,-3,25,0,-4,26,0,-5,27,0,-6,28,0,-7,48,0,-8,49,0,-9,50,0,-10,51,0,-1,83,0,-2,88,0,-3,89,0,-4,90,0,-5,91,0,-6,92,0,-7,93,0,-1,56,0,-2,139,0,-3,142,0,-4,144,0,-5,146,0,-6,149,0,-7,151,0,-1,58,0,-2,164,0,-3,167,0,-4,169,0,-5,171,0,-6,174,0,-7,176,0,-1,60,0,-2,189,0,-3,192,0,-4,194,0,-5,196,0,-6,199,0,-7,201,0,-1,62,0,-2,214,0,-3,217,0,-4,219,0,-5,221,0,-6,224,0,-7,226,0,-1,64,0,-2,239,0,-3,242,0,-4,244,0,-5,246,0,-6,249,0,-7,251,0,-1,66,0,-2,264,0,-3,267,0,-4,269,0,-5,271,0,-6,274,0,-7,276,0,-1,68,0,-2,289,0,-3,292,0,-4,294,0,-5,296,0,-6,299,0,-7,301,0,-1,70,0,-2,314,0,-3,317,0,-4,319,0,-5,321,0,-6,324,0,-7,326,0,1,23,0,1,23,0,1,23,0,12,23,0,13,53,0,1,23,0,-1,53,0,1,24,0,1,24,0,1,24,0,12,24,0,13,54,0,1,24,0,-1,54,0,3,25,0,1,25,0,1,25,0,-1,127,0,3,26,0,1,26,0,1,26,0,-1,128,0,3,27,0,1,27,0,1,27,0,-1,129,0,3,28,0,1,28,0,1,28,0,-1,130,0,1,29,0,1,29,0,1,29,0,1,30,0,-1,132,0,-2,134,0,-3,135,0,1,31,0,-1,157,0,-2,159,0,-3,160,0,1,32,0,-1,182,0,-2,184,0,-3,185,0,1,33,0,-1,207,0,-2,209,0,-3,210,0,1,34,0,-1,232,0,-2,234,0,-3,235,0,1,35,0,-1,257,0,-2,259,0,-3,260,0,1,36,0,-1,282,0,-2,284,0,-3,285,0,1,37,0,-1,307,0,-2,309,0,-3,310,0,-1,39,0,-2,77,0,-3,118,0,-2,40,0,-3,41,0,-1,94,0,-2,99,0,-3,102,0,-1,105,0,-2,110,0,-3,113,0,-1,123,0,-2,79,0,-3,80,0,3,43,0,-1,125,0,1,44,0,1,44,0,1,44,0,1,45,0,1,45,0,1,45,0,1,46,0,1,46,0,1,46,0,1,47,0,1,47,0,1,47,0,1,48,0,1,48,0,1,48,0,1,49,0,1,49,0,1,49,0,1,50,0,1,50,0,1,50,0,1,51,0,1,51,0,1,51,0,1,52,0,1,52,0,1,52,0,1,53,0,1,53,0,1,54,0,1,54,0,-2,153,0,-3,155,0,0,56,0,-2,137,0,-3,138,0,-2,178,0,-3,180,0,0,58,0,-2,162,0,-3,163,0,-2,203,0,-3,205,0,0,60,0,-2,187,0,-3,188,0,-2,228,0,-3,230,0,0,62,0,-2,212,0,-3,213,0,-2,253,0,-3,255,0,0,64,0,-2,237,0,-3,238,0,-2,278,0,-3,280,0,0,66,0,-2,262,0,-3,263,0,-2,303,0,-3,305,0,0,68,0,-2,287,0,-3,288,0,-2,328,0,-3,330,0,0,70,0,-2,312,0,-3,313,0,1,71,0,1,71,0,1,72,0,-1,73,0,1,73,0,-1,82,0,-2,120,0,-1,97,0,-2,98,0,-1,108,0,-2,109,0,-1,116,0,-2,117,0,7,78,0,1,79,0,1,80,0,1,81,0,-1,84,0,-1,85,0,-1,86,0,-1,87,0,0,87,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,0,93,0,-1,95,0,-1,96,0,0,97,0,0,98,0,-1,100,0,-1,101,0,0,101,0,-1,103,0,-1,104,0,0,104,0,-1,106,0,-1,107,0,0,108,0,0,109,0,-1,111,0,-1,112,0,0,112,0,-1,114,0,-1,115,0,0,115,0,0,116,0,0,117,0,-1,119,0,0,119,0,-1,121,0,-1,122,0,1,124,0,1,125,0,1,126,0,1,127,0,1,128,0,1,129,0,1,130,0,1,131,0,-1,133,0,7,133,0,1,134,0,-1,136,0,0,137,0,0,138,0,-1,140,0,-1,141,0,0,141,0,-1,143,0,0,143,0,-1,145,0,0,145,0,-1,147,0,-1,148,0,0,148,0,-1,150,0,0,150,0,-1,152,0,0,152,0,-1,154,0,0,154,0,-1,156,0,0,156,0,-1,158,0,7,158,0,1,159,0,-1,161,0,0,162,0,0,163,0,-1,165,0,-1,166,0,0,166,0,-1,168,0,0,168,0,-1,170,0,0,170,0,-1,172,0,-1,173,0,0,173,0,-1,175,0,0,175,0,-1,177,0,0,177,0,-1,179,0,0,179,0,-1,181,0,0,181,0,-1,183,0,7,183,0,1,184,0,-1,186,0,0,187,0,0,188,0,-1,190,0,-1,191,0,0,191,0,-1,193,0,0,193,0,-1,195,0,0,195,0,-1,197,0,-1,198,0,0,198,0,-1,200,0,0,200,0,-1,202,0,0,202,0,-1,204,0,0,204,0,-1,206,0,0,206,0,-1,208,0,7,208,0,1,209,0,-1,211,0,0,212,0,0,213,0,-1,215,0,-1,216,0,0,216,0,-1,218,0,0,218,0,-1,220,0,0,220,0,-1,222,0,-1,223,0,0,223,0,-1,225,0,0,225,0,-1,227,0,0,227,0,-1,229,0,0,229,0,-1,231,0,0,231,0,-1,233,0,7,233,0,1,234,0,-1,236,0,0,237,0,0,238,0,-1,240,0,-1,241,0,0,241,0,-1,243,0,0,243,0,-1,245,0,0,245,0,-1,247,0,-1,248,0,0,248,0,-1,250,0,0,250,0,-1,252,0,0,252,0,-1,254,0,0,254,0,-1,256,0,0,256,0,-1,258,0,7,258,0,1,259,0,-1,261,0,0,262,0,0,263,0,-1,265,0,-1,266,0,0,266,0,-1,268,0,0,268,0,-1,270,0,0,270,0,-1,272,0,-1,273,0,0,273,0,-1,275,0,0,275,0,-1,277,0,0,277,0,-1,279,0,0,279,0,-1,281,0,0,281,0,-1,283,0,7,283,0,1,284,0,-1,286,0,0,287,0,0,288,0,-1,290,0,-1,291,0,0,291,0,-1,293,0,0,293,0,-1,295,0,0,295,0,-1,297,0,-1,298,0,0,298,0,-1,300,0,0,300,0,-1,302,0,0,302,0,-1,304,0,0,304,0,-1,306,0,0,306,0,-1,308,0,7,308,0,1,309,0,-1,311,0,0,312,0,0,313,0,-1,315,0,-1,316,0,0,316,0,-1,318,0,0,318,0,-1,320,0,0,320,0,-1,322,0,-1,323,0,0,323,0,-1,325,0,0,325,0,-1,327,0,0,327,0,-1,329,0,0,329,0,-1,331,0,0,331,0,19,10,1,0,10,2,0,10,3,0,10,4,0,10,5,0,10,6,0,10,7,0,10,8,0,10,9,0,10,11,0,12,13,0,39,15,0,55,16,0,57,17,0,59,18,0,61,19,0,63,20,0,65,21,0,67,22,0,69,23,0,29,24,0,29,38,0,82,42,0,122,55,0,136,57,0,161,59,0,186,61,0,211,63,0,236,65,0,261,67,0,286,69,0,311,75,0,96,76,0,107,78,1,123,550],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,5,-1,8,-1,2,-1,2,-1,-2,2,5,-1,-2,-3,9,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,10,10,10,10,20,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9,-1,8,-1,-2,2,5,-1,-2,-3,9],[32,33,34,35,15,36,2,9,2,17,17,37,38,39,18,40,18,11,41,42,43,9,2,9,2,9,2,9,2,13,14,13,14,13,14,13,14,11,2,11,2,11,2,11,2,9,2,19,20,19,20,44,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1,4,3,0,0,5,6,1,7,8,1]]]]
